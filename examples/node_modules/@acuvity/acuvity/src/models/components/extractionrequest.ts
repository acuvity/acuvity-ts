/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the extraction that the user wants to extract.
 */
export type Extractionrequest = {
  /**
   * Annotations attached to the extraction.
   */
  annotations?: { [k: string]: string } | undefined;
  /**
   * The binary data to request extraction for.
   */
  data?: string | undefined;
  /**
   * If true, this extraction is for internal use only. This can be used by agentic
   *
   * @remarks
   * systems to mark an extraction as internal only as opposed to user facing.
   */
  internal?: boolean | undefined;
  /**
   * A means of distinguishing what was extracted, such as prompt, input file or
   *
   * @remarks
   * code.
   */
  label?: string | undefined;
};

/** @internal */
export const Extractionrequest$inboundSchema: z.ZodType<
  Extractionrequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  annotations: z.record(z.string()).optional(),
  data: z.string().optional(),
  internal: z.boolean().optional(),
  label: z.string().optional(),
});

/** @internal */
export type Extractionrequest$Outbound = {
  annotations?: { [k: string]: string } | undefined;
  data?: string | undefined;
  internal?: boolean | undefined;
  label?: string | undefined;
};

/** @internal */
export const Extractionrequest$outboundSchema: z.ZodType<
  Extractionrequest$Outbound,
  z.ZodTypeDef,
  Extractionrequest
> = z.object({
  annotations: z.record(z.string()).optional(),
  data: z.string().optional(),
  internal: z.boolean().optional(),
  label: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Extractionrequest$ {
  /** @deprecated use `Extractionrequest$inboundSchema` instead. */
  export const inboundSchema = Extractionrequest$inboundSchema;
  /** @deprecated use `Extractionrequest$outboundSchema` instead. */
  export const outboundSchema = Extractionrequest$outboundSchema;
  /** @deprecated use `Extractionrequest$Outbound` instead. */
  export type Outbound = Extractionrequest$Outbound;
}

export function extractionrequestToJSON(
  extractionrequest: Extractionrequest,
): string {
  return JSON.stringify(
    Extractionrequest$outboundSchema.parse(extractionrequest),
  );
}

export function extractionrequestFromJSON(
  jsonString: string,
): SafeParseResult<Extractionrequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Extractionrequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Extractionrequest' from JSON`,
  );
}
