/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Holds information about latencies introduced by Apex.
 */
export type Latency = {
  /**
   * How much time it took to run the access policy in nanoseconds.
   */
  accessPolicy?: number | undefined;
  /**
   * How much time it took to run content analysis in nanoseconds.
   */
  analysis?: number | undefined;
  /**
   * How much time it took to run the assign policy in nanoseconds.
   */
  assignPolicy?: number | undefined;
  /**
   * How much time it took to run content policy in nanoseconds.
   */
  contentPolicy?: number | undefined;
  /**
   * How much time it took to run input or output extraction in nanoseconds.
   */
  extraction?: number | undefined;
};

/** @internal */
export const Latency$inboundSchema: z.ZodType<Latency, z.ZodTypeDef, unknown> =
  z.object({
    accessPolicy: z.number().int().optional(),
    analysis: z.number().int().optional(),
    assignPolicy: z.number().int().optional(),
    contentPolicy: z.number().int().optional(),
    extraction: z.number().int().optional(),
  });

/** @internal */
export type Latency$Outbound = {
  accessPolicy?: number | undefined;
  analysis?: number | undefined;
  assignPolicy?: number | undefined;
  contentPolicy?: number | undefined;
  extraction?: number | undefined;
};

/** @internal */
export const Latency$outboundSchema: z.ZodType<
  Latency$Outbound,
  z.ZodTypeDef,
  Latency
> = z.object({
  accessPolicy: z.number().int().optional(),
  analysis: z.number().int().optional(),
  assignPolicy: z.number().int().optional(),
  contentPolicy: z.number().int().optional(),
  extraction: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Latency$ {
  /** @deprecated use `Latency$inboundSchema` instead. */
  export const inboundSchema = Latency$inboundSchema;
  /** @deprecated use `Latency$outboundSchema` instead. */
  export const outboundSchema = Latency$outboundSchema;
  /** @deprecated use `Latency$Outbound` instead. */
  export type Outbound = Latency$Outbound;
}

export function latencyToJSON(latency: Latency): string {
  return JSON.stringify(Latency$outboundSchema.parse(latency));
}

export function latencyFromJSON(
  jsonString: string,
): SafeParseResult<Latency, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Latency$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Latency' from JSON`,
  );
}
