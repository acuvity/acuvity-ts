/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represent an analyzer model.
 */
export type Analyzermodel = {
  /**
   * The name of the model.
   */
  name?: string | undefined;
  /**
   * The revision of the model.
   */
  revision?: string | undefined;
};

/** @internal */
export const Analyzermodel$inboundSchema: z.ZodType<
  Analyzermodel,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  revision: z.string().optional(),
});

/** @internal */
export type Analyzermodel$Outbound = {
  name?: string | undefined;
  revision?: string | undefined;
};

/** @internal */
export const Analyzermodel$outboundSchema: z.ZodType<
  Analyzermodel$Outbound,
  z.ZodTypeDef,
  Analyzermodel
> = z.object({
  name: z.string().optional(),
  revision: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Analyzermodel$ {
  /** @deprecated use `Analyzermodel$inboundSchema` instead. */
  export const inboundSchema = Analyzermodel$inboundSchema;
  /** @deprecated use `Analyzermodel$outboundSchema` instead. */
  export const outboundSchema = Analyzermodel$outboundSchema;
  /** @deprecated use `Analyzermodel$Outbound` instead. */
  export type Outbound = Analyzermodel$Outbound;
}

export function analyzermodelToJSON(analyzermodel: Analyzermodel): string {
  return JSON.stringify(Analyzermodel$outboundSchema.parse(analyzermodel));
}

export function analyzermodelFromJSON(
  jsonString: string,
): SafeParseResult<Analyzermodel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Analyzermodel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Analyzermodel' from JSON`,
  );
}
