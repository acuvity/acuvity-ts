/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Principal,
  Principal$inboundSchema,
  Principal$Outbound,
  Principal$outboundSchema,
} from "./principal.js";

/**
 * Represents an alert event raised by a policy.
 */
export type Alertevent = {
  /**
   * The name of the alert definition that triggered the alert event.
   */
  alertDefinition: string;
  /**
   * The namespace of the alert definition.
   */
  alertDefinitionNamespace?: string | undefined;
  /**
   * Describe the principal.
   */
  principal: Principal;
  /**
   * The provider used that the alert came from.
   */
  provider?: string | undefined;
  /**
   * When the alert event was raised.
   */
  timestamp?: Date | undefined;
};

/** @internal */
export const Alertevent$inboundSchema: z.ZodType<
  Alertevent,
  z.ZodTypeDef,
  unknown
> = z.object({
  alertDefinition: z.string(),
  alertDefinitionNamespace: z.string().optional(),
  principal: Principal$inboundSchema,
  provider: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Alertevent$Outbound = {
  alertDefinition: string;
  alertDefinitionNamespace?: string | undefined;
  principal: Principal$Outbound;
  provider?: string | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const Alertevent$outboundSchema: z.ZodType<
  Alertevent$Outbound,
  z.ZodTypeDef,
  Alertevent
> = z.object({
  alertDefinition: z.string(),
  alertDefinitionNamespace: z.string().optional(),
  principal: Principal$outboundSchema,
  provider: z.string().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Alertevent$ {
  /** @deprecated use `Alertevent$inboundSchema` instead. */
  export const inboundSchema = Alertevent$inboundSchema;
  /** @deprecated use `Alertevent$outboundSchema` instead. */
  export const outboundSchema = Alertevent$outboundSchema;
  /** @deprecated use `Alertevent$Outbound` instead. */
  export type Outbound = Alertevent$Outbound;
}

export function alerteventToJSON(alertevent: Alertevent): string {
  return JSON.stringify(Alertevent$outboundSchema.parse(alertevent));
}

export function alerteventFromJSON(
  jsonString: string,
): SafeParseResult<Alertevent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Alertevent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Alertevent' from JSON`,
  );
}
