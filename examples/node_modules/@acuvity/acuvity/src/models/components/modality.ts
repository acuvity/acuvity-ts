/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the modality of a some data.
 */
export type Modality = {
  /**
   * The group of data.
   */
  group: string;
  /**
   * The type of data.
   */
  type: string;
};

/** @internal */
export const Modality$inboundSchema: z.ZodType<
  Modality,
  z.ZodTypeDef,
  unknown
> = z.object({
  group: z.string(),
  type: z.string(),
});

/** @internal */
export type Modality$Outbound = {
  group: string;
  type: string;
};

/** @internal */
export const Modality$outboundSchema: z.ZodType<
  Modality$Outbound,
  z.ZodTypeDef,
  Modality
> = z.object({
  group: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Modality$ {
  /** @deprecated use `Modality$inboundSchema` instead. */
  export const inboundSchema = Modality$inboundSchema;
  /** @deprecated use `Modality$outboundSchema` instead. */
  export const outboundSchema = Modality$outboundSchema;
  /** @deprecated use `Modality$Outbound` instead. */
  export type Outbound = Modality$Outbound;
}

export function modalityToJSON(modality: Modality): string {
  return JSON.stringify(Modality$outboundSchema.parse(modality));
}

export function modalityFromJSON(
  jsonString: string,
): SafeParseResult<Modality, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Modality$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Modality' from JSON`,
  );
}
