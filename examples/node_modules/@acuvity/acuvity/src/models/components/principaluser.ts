/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the principal information of a user.
 */
export type Principaluser = {
  /**
   * Identification bit that will be used to identify the origin of the request.
   */
  name?: string | undefined;
};

/** @internal */
export const Principaluser$inboundSchema: z.ZodType<
  Principaluser,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type Principaluser$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const Principaluser$outboundSchema: z.ZodType<
  Principaluser$Outbound,
  z.ZodTypeDef,
  Principaluser
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Principaluser$ {
  /** @deprecated use `Principaluser$inboundSchema` instead. */
  export const inboundSchema = Principaluser$inboundSchema;
  /** @deprecated use `Principaluser$outboundSchema` instead. */
  export const outboundSchema = Principaluser$outboundSchema;
  /** @deprecated use `Principaluser$Outbound` instead. */
  export type Outbound = Principaluser$Outbound;
}

export function principaluserToJSON(principaluser: Principaluser): string {
  return JSON.stringify(Principaluser$outboundSchema.parse(principaluser));
}

export function principaluserFromJSON(
  jsonString: string,
): SafeParseResult<Principaluser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Principaluser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Principaluser' from JSON`,
  );
}
