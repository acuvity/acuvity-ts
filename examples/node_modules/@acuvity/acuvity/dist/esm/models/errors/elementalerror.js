/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
export class Elementalerror extends Error {
    constructor(err) {
        const message = "message" in err && typeof err.message === "string"
            ? err.message
            : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;
        if (err.code != null)
            this.code = err.code;
        if (err.data != null)
            this.data = err.data;
        if (err.description != null)
            this.description = err.description;
        if (err.subject != null)
            this.subject = err.subject;
        if (err.title != null)
            this.title = err.title;
        if (err.trace != null)
            this.trace = err.trace;
        this.name = "Elementalerror";
    }
}
/** @internal */
export const Data$inboundSchema = z
    .object({});
/** @internal */
export const Data$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Data$;
(function (Data$) {
    /** @deprecated use `Data$inboundSchema` instead. */
    Data$.inboundSchema = Data$inboundSchema;
    /** @deprecated use `Data$outboundSchema` instead. */
    Data$.outboundSchema = Data$outboundSchema;
})(Data$ || (Data$ = {}));
export function dataToJSON(data) {
    return JSON.stringify(Data$outboundSchema.parse(data));
}
export function dataFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Data$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Data' from JSON`);
}
/** @internal */
export const Elementalerror$inboundSchema = z.object({
    code: z.number().int().optional(),
    data: z.lazy(() => Data$inboundSchema).optional(),
    description: z.string().optional(),
    subject: z.string().optional(),
    title: z.string().optional(),
    trace: z.string().optional(),
})
    .transform((v) => {
    return new Elementalerror(v);
});
/** @internal */
export const Elementalerror$outboundSchema = z.instanceof(Elementalerror)
    .transform(v => v.data$)
    .pipe(z.object({
    code: z.number().int().optional(),
    data: z.lazy(() => Data$outboundSchema).optional(),
    description: z.string().optional(),
    subject: z.string().optional(),
    title: z.string().optional(),
    trace: z.string().optional(),
}));
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Elementalerror$;
(function (Elementalerror$) {
    /** @deprecated use `Elementalerror$inboundSchema` instead. */
    Elementalerror$.inboundSchema = Elementalerror$inboundSchema;
    /** @deprecated use `Elementalerror$outboundSchema` instead. */
    Elementalerror$.outboundSchema = Elementalerror$outboundSchema;
})(Elementalerror$ || (Elementalerror$ = {}));
//# sourceMappingURL=elementalerror.js.map