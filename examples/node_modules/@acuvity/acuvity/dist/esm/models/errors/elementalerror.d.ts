import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
/**
 * Additional error data
 */
export type Data = {};
export type ElementalerrorData = {
    /**
     * Error code
     */
    code?: number | undefined;
    /**
     * Additional error data
     */
    data?: Data | undefined;
    /**
     * Error description
     */
    description?: string | undefined;
    /**
     * Error subject
     */
    subject?: string | undefined;
    /**
     * Error title
     */
    title?: string | undefined;
    /**
     * Error trace
     */
    trace?: string | undefined;
};
export declare class Elementalerror extends Error {
    /**
     * Error code
     */
    code?: number | undefined;
    /**
     * Additional error data
     */
    data?: Data | undefined;
    /**
     * Error description
     */
    description?: string | undefined;
    /**
     * Error subject
     */
    subject?: string | undefined;
    /**
     * Error title
     */
    title?: string | undefined;
    /**
     * Error trace
     */
    trace?: string | undefined;
    /** The original data that was passed to this error instance. */
    data$: ElementalerrorData;
    constructor(err: ElementalerrorData);
}
/** @internal */
export declare const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown>;
/** @internal */
export type Data$Outbound = {};
/** @internal */
export declare const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Data$ {
    /** @deprecated use `Data$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown>;
    /** @deprecated use `Data$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data>;
    /** @deprecated use `Data$Outbound` instead. */
    type Outbound = Data$Outbound;
}
export declare function dataToJSON(data: Data): string;
export declare function dataFromJSON(jsonString: string): SafeParseResult<Data, SDKValidationError>;
/** @internal */
export declare const Elementalerror$inboundSchema: z.ZodType<Elementalerror, z.ZodTypeDef, unknown>;
/** @internal */
export type Elementalerror$Outbound = {
    code?: number | undefined;
    data?: Data$Outbound | undefined;
    description?: string | undefined;
    subject?: string | undefined;
    title?: string | undefined;
    trace?: string | undefined;
};
/** @internal */
export declare const Elementalerror$outboundSchema: z.ZodType<Elementalerror$Outbound, z.ZodTypeDef, Elementalerror>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Elementalerror$ {
    /** @deprecated use `Elementalerror$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Elementalerror, z.ZodTypeDef, unknown>;
    /** @deprecated use `Elementalerror$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Elementalerror$Outbound, z.ZodTypeDef, Elementalerror>;
    /** @deprecated use `Elementalerror$Outbound` instead. */
    type Outbound = Elementalerror$Outbound;
}
//# sourceMappingURL=elementalerror.d.ts.map