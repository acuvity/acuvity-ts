/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Extractionrequest$inboundSchema = z.object({
    annotations: z.record(z.string()).optional(),
    data: z.string().optional(),
    internal: z.boolean().optional(),
    label: z.string().optional(),
});
/** @internal */
export const Extractionrequest$outboundSchema = z.object({
    annotations: z.record(z.string()).optional(),
    data: z.string().optional(),
    internal: z.boolean().optional(),
    label: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Extractionrequest$;
(function (Extractionrequest$) {
    /** @deprecated use `Extractionrequest$inboundSchema` instead. */
    Extractionrequest$.inboundSchema = Extractionrequest$inboundSchema;
    /** @deprecated use `Extractionrequest$outboundSchema` instead. */
    Extractionrequest$.outboundSchema = Extractionrequest$outboundSchema;
})(Extractionrequest$ || (Extractionrequest$ = {}));
export function extractionrequestToJSON(extractionrequest) {
    return JSON.stringify(Extractionrequest$outboundSchema.parse(extractionrequest));
}
export function extractionrequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Extractionrequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Extractionrequest' from JSON`);
}
//# sourceMappingURL=extractionrequest.js.map