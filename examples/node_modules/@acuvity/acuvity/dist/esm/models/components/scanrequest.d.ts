import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Extractionrequest, Extractionrequest$Outbound } from "./extractionrequest.js";
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export declare const ScanrequestAnonymization: {
    readonly FixedSize: "FixedSize";
    readonly VariableSize: "VariableSize";
};
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export type ScanrequestAnonymization = ClosedEnum<typeof ScanrequestAnonymization>;
/**
 * The type of text.
 */
export declare const ScanrequestType: {
    readonly Input: "Input";
    readonly Output: "Output";
};
/**
 * The type of text.
 */
export type ScanrequestType = ClosedEnum<typeof ScanrequestType>;
/**
 * This is a scan request.
 */
export type Scanrequest = {
    /**
     * AccessPolicy allows to pass optional Rego access policy. If not set,
     *
     * @remarks
     * The action is always Allow,
     * If it is set, it will be run, and the final decision will be computed based
     * on that policy.
     * If the rego code does not start with package main, then the needed
     * classic package definition and  acuvity imports will be added
     * automatically.
     * If the code starts with package main, then everything remains untouched.
     */
    accessPolicy?: string | undefined;
    /**
     * The name of the analyzers to run by the pipelines. If empty, it means all of
     *
     * @remarks
     * them. Possible values are PIIs, Secrets, Topics, Confidentiality, Exploits.
     */
    analyzers?: Array<string> | undefined;
    /**
     * Annotations attached to the extraction.
     */
    annotations?: {
        [k: string]: string;
    } | undefined;
    /**
     * How to anonymize the data. If deanonymize is true, then VariablSize is required.
     */
    anonymization?: ScanrequestAnonymization | undefined;
    /**
     * In the case of a contentPolicy that asks for a confirmation, this is the
     *
     * @remarks
     * hash you must send back to bypass the block. This is only useful when a
     * content policy has been set or is evaluated remotely.
     */
    bypassHash?: string | undefined;
    /**
     * ContentPolicy allows to pass optional Rego content policy. If not set,
     *
     * @remarks
     * The action is always Allow, and there cannot be any alerts raised etc
     * If it is set, it will be run, and the final decision will be computed based
     * on that policy.
     * If the rego code does not start with package main, then the needed
     * classic package definition and  acuvity imports will be added
     * automatically.
     * If the code starts with package main, then everything remains untouched.
     */
    contentPolicy?: string | undefined;
    /**
     * The extractions to request.
     */
    extractions?: Array<Extractionrequest> | undefined;
    /**
     * The keywords found during classification.
     */
    keywords?: Array<string> | undefined;
    /**
     * Messages to process and provide detections for. Use data in extractions for
     *
     * @remarks
     * processing binary data.
     */
    messages?: Array<string> | undefined;
    /**
     * If true, the system will not log the contents that were scanned.
     */
    minimalLogging?: boolean | undefined;
    /**
     * The redactions to perform if they are detected.
     */
    redactions?: Array<string> | undefined;
    /**
     * The type of text.
     */
    type?: ScanrequestType | undefined;
};
/** @internal */
export declare const ScanrequestAnonymization$inboundSchema: z.ZodNativeEnum<typeof ScanrequestAnonymization>;
/** @internal */
export declare const ScanrequestAnonymization$outboundSchema: z.ZodNativeEnum<typeof ScanrequestAnonymization>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScanrequestAnonymization$ {
    /** @deprecated use `ScanrequestAnonymization$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FixedSize: "FixedSize";
        readonly VariableSize: "VariableSize";
    }>;
    /** @deprecated use `ScanrequestAnonymization$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FixedSize: "FixedSize";
        readonly VariableSize: "VariableSize";
    }>;
}
/** @internal */
export declare const ScanrequestType$inboundSchema: z.ZodNativeEnum<typeof ScanrequestType>;
/** @internal */
export declare const ScanrequestType$outboundSchema: z.ZodNativeEnum<typeof ScanrequestType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScanrequestType$ {
    /** @deprecated use `ScanrequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
    /** @deprecated use `ScanrequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
}
/** @internal */
export declare const Scanrequest$inboundSchema: z.ZodType<Scanrequest, z.ZodTypeDef, unknown>;
/** @internal */
export type Scanrequest$Outbound = {
    accessPolicy?: string | undefined;
    analyzers?: Array<string> | undefined;
    annotations?: {
        [k: string]: string;
    } | undefined;
    anonymization: string;
    bypassHash?: string | undefined;
    contentPolicy?: string | undefined;
    extractions?: Array<Extractionrequest$Outbound> | undefined;
    keywords?: Array<string> | undefined;
    messages?: Array<string> | undefined;
    minimalLogging?: boolean | undefined;
    redactions?: Array<string> | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const Scanrequest$outboundSchema: z.ZodType<Scanrequest$Outbound, z.ZodTypeDef, Scanrequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scanrequest$ {
    /** @deprecated use `Scanrequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Scanrequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Scanrequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Scanrequest$Outbound, z.ZodTypeDef, Scanrequest>;
    /** @deprecated use `Scanrequest$Outbound` instead. */
    type Outbound = Scanrequest$Outbound;
}
export declare function scanrequestToJSON(scanrequest: Scanrequest): string;
export declare function scanrequestFromJSON(jsonString: string): SafeParseResult<Scanrequest, SDKValidationError>;
//# sourceMappingURL=scanrequest.d.ts.map