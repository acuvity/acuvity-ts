import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Represent a detector an analyzer can use.
 */
export type Detector = {
    /**
     * The description of the detection.
     */
    description?: string | undefined;
    /**
     * The group the detection belongs to.
     */
    group?: string | undefined;
    /**
     * The label returned by the model.
     */
    label?: string | undefined;
    /**
     * The name of the detection.
     */
    name?: string | undefined;
    /**
     * Tell if the detection is positional.
     */
    positional?: boolean | undefined;
};
/** @internal */
export declare const Detector$inboundSchema: z.ZodType<Detector, z.ZodTypeDef, unknown>;
/** @internal */
export type Detector$Outbound = {
    description?: string | undefined;
    group?: string | undefined;
    label?: string | undefined;
    name?: string | undefined;
    positional?: boolean | undefined;
};
/** @internal */
export declare const Detector$outboundSchema: z.ZodType<Detector$Outbound, z.ZodTypeDef, Detector>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Detector$ {
    /** @deprecated use `Detector$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Detector, z.ZodTypeDef, unknown>;
    /** @deprecated use `Detector$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Detector$Outbound, z.ZodTypeDef, Detector>;
    /** @deprecated use `Detector$Outbound` instead. */
    type Outbound = Detector$Outbound;
}
export declare function detectorToJSON(detector: Detector): string;
export declare function detectorFromJSON(jsonString: string): SafeParseResult<Detector, SDKValidationError>;
//# sourceMappingURL=detector.d.ts.map