/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Modality$inboundSchema, Modality$outboundSchema, } from "./modality.js";
import { Textualdetection$inboundSchema, Textualdetection$outboundSchema, } from "./textualdetection.js";
/** @internal */
export const Extraction$inboundSchema = z.object({
    PIIs: z.record(z.number()).optional(),
    annotations: z.record(z.string()).optional(),
    categories: z.array(Modality$inboundSchema).optional(),
    confidentiality: z.number().optional(),
    data: z.string().optional(),
    detections: z.array(Textualdetection$inboundSchema).optional(),
    exploits: z.record(z.number()).optional(),
    hash: z.string().optional(),
    intent: z.record(z.number()).optional(),
    internal: z.boolean().optional(),
    keywords: z.record(z.number()).optional(),
    label: z.string().optional(),
    languages: z.record(z.number()).optional(),
    modalities: z.array(Modality$inboundSchema).optional(),
    relevance: z.number().optional(),
    secrets: z.record(z.number()).optional(),
    topics: z.record(z.number()).optional(),
}).transform((v) => {
    return remap$(v, {
        "PIIs": "piIs",
    });
});
/** @internal */
export const Extraction$outboundSchema = z.object({
    piIs: z.record(z.number()).optional(),
    annotations: z.record(z.string()).optional(),
    categories: z.array(Modality$outboundSchema).optional(),
    confidentiality: z.number().optional(),
    data: z.string().optional(),
    detections: z.array(Textualdetection$outboundSchema).optional(),
    exploits: z.record(z.number()).optional(),
    hash: z.string().optional(),
    intent: z.record(z.number()).optional(),
    internal: z.boolean().optional(),
    keywords: z.record(z.number()).optional(),
    label: z.string().optional(),
    languages: z.record(z.number()).optional(),
    modalities: z.array(Modality$outboundSchema).optional(),
    relevance: z.number().optional(),
    secrets: z.record(z.number()).optional(),
    topics: z.record(z.number()).optional(),
}).transform((v) => {
    return remap$(v, {
        piIs: "PIIs",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Extraction$;
(function (Extraction$) {
    /** @deprecated use `Extraction$inboundSchema` instead. */
    Extraction$.inboundSchema = Extraction$inboundSchema;
    /** @deprecated use `Extraction$outboundSchema` instead. */
    Extraction$.outboundSchema = Extraction$outboundSchema;
})(Extraction$ || (Extraction$ = {}));
export function extractionToJSON(extraction) {
    return JSON.stringify(Extraction$outboundSchema.parse(extraction));
}
export function extractionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Extraction$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Extraction' from JSON`);
}
//# sourceMappingURL=extraction.js.map