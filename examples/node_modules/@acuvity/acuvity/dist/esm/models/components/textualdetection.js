/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/**
 * The type of detection.
 */
export const TextualdetectionType = {
    Keyword: "Keyword",
    Pii: "PII",
    Secret: "Secret",
};
/** @internal */
export const TextualdetectionType$inboundSchema = z.nativeEnum(TextualdetectionType);
/** @internal */
export const TextualdetectionType$outboundSchema = TextualdetectionType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TextualdetectionType$;
(function (TextualdetectionType$) {
    /** @deprecated use `TextualdetectionType$inboundSchema` instead. */
    TextualdetectionType$.inboundSchema = TextualdetectionType$inboundSchema;
    /** @deprecated use `TextualdetectionType$outboundSchema` instead. */
    TextualdetectionType$.outboundSchema = TextualdetectionType$outboundSchema;
})(TextualdetectionType$ || (TextualdetectionType$ = {}));
/** @internal */
export const Textualdetection$inboundSchema = z.object({
    end: z.number().int().optional(),
    key: z.string().optional(),
    name: z.string().optional(),
    redacted: z.boolean().optional(),
    redactedEnd: z.number().int().optional(),
    redactedStart: z.number().int().optional(),
    score: z.number().optional(),
    start: z.number().int().optional(),
    type: TextualdetectionType$inboundSchema.optional(),
});
/** @internal */
export const Textualdetection$outboundSchema = z.object({
    end: z.number().int().optional(),
    key: z.string().optional(),
    name: z.string().optional(),
    redacted: z.boolean().optional(),
    redactedEnd: z.number().int().optional(),
    redactedStart: z.number().int().optional(),
    score: z.number().optional(),
    start: z.number().int().optional(),
    type: TextualdetectionType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Textualdetection$;
(function (Textualdetection$) {
    /** @deprecated use `Textualdetection$inboundSchema` instead. */
    Textualdetection$.inboundSchema = Textualdetection$inboundSchema;
    /** @deprecated use `Textualdetection$outboundSchema` instead. */
    Textualdetection$.outboundSchema = Textualdetection$outboundSchema;
})(Textualdetection$ || (Textualdetection$ = {}));
export function textualdetectionToJSON(textualdetection) {
    return JSON.stringify(Textualdetection$outboundSchema.parse(textualdetection));
}
export function textualdetectionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Textualdetection$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Textualdetection' from JSON`);
}
//# sourceMappingURL=textualdetection.js.map