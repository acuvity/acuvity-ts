/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Extractionrequest$inboundSchema, Extractionrequest$outboundSchema, } from "./extractionrequest.js";
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export const ScanrequestAnonymization = {
    FixedSize: "FixedSize",
    VariableSize: "VariableSize",
};
/**
 * The type of text.
 */
export const ScanrequestType = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
export const ScanrequestAnonymization$inboundSchema = z.nativeEnum(ScanrequestAnonymization);
/** @internal */
export const ScanrequestAnonymization$outboundSchema = ScanrequestAnonymization$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScanrequestAnonymization$;
(function (ScanrequestAnonymization$) {
    /** @deprecated use `ScanrequestAnonymization$inboundSchema` instead. */
    ScanrequestAnonymization$.inboundSchema = ScanrequestAnonymization$inboundSchema;
    /** @deprecated use `ScanrequestAnonymization$outboundSchema` instead. */
    ScanrequestAnonymization$.outboundSchema = ScanrequestAnonymization$outboundSchema;
})(ScanrequestAnonymization$ || (ScanrequestAnonymization$ = {}));
/** @internal */
export const ScanrequestType$inboundSchema = z.nativeEnum(ScanrequestType);
/** @internal */
export const ScanrequestType$outboundSchema = ScanrequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScanrequestType$;
(function (ScanrequestType$) {
    /** @deprecated use `ScanrequestType$inboundSchema` instead. */
    ScanrequestType$.inboundSchema = ScanrequestType$inboundSchema;
    /** @deprecated use `ScanrequestType$outboundSchema` instead. */
    ScanrequestType$.outboundSchema = ScanrequestType$outboundSchema;
})(ScanrequestType$ || (ScanrequestType$ = {}));
/** @internal */
export const Scanrequest$inboundSchema = z.object({
    accessPolicy: z.string().optional(),
    analyzers: z.array(z.string()).optional(),
    annotations: z.record(z.string()).optional(),
    anonymization: ScanrequestAnonymization$inboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    contentPolicy: z.string().optional(),
    extractions: z.array(Extractionrequest$inboundSchema).optional(),
    keywords: z.array(z.string()).optional(),
    messages: z.array(z.string()).optional(),
    minimalLogging: z.boolean().optional(),
    redactions: z.array(z.string()).optional(),
    type: ScanrequestType$inboundSchema.optional(),
});
/** @internal */
export const Scanrequest$outboundSchema = z.object({
    accessPolicy: z.string().optional(),
    analyzers: z.array(z.string()).optional(),
    annotations: z.record(z.string()).optional(),
    anonymization: ScanrequestAnonymization$outboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    contentPolicy: z.string().optional(),
    extractions: z.array(Extractionrequest$outboundSchema).optional(),
    keywords: z.array(z.string()).optional(),
    messages: z.array(z.string()).optional(),
    minimalLogging: z.boolean().optional(),
    redactions: z.array(z.string()).optional(),
    type: ScanrequestType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Scanrequest$;
(function (Scanrequest$) {
    /** @deprecated use `Scanrequest$inboundSchema` instead. */
    Scanrequest$.inboundSchema = Scanrequest$inboundSchema;
    /** @deprecated use `Scanrequest$outboundSchema` instead. */
    Scanrequest$.outboundSchema = Scanrequest$outboundSchema;
})(Scanrequest$ || (Scanrequest$ = {}));
export function scanrequestToJSON(scanrequest) {
    return JSON.stringify(Scanrequest$outboundSchema.parse(scanrequest));
}
export function scanrequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Scanrequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scanrequest' from JSON`);
}
//# sourceMappingURL=scanrequest.js.map