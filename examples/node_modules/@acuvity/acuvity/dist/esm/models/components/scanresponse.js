/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Alertevent$inboundSchema, Alertevent$outboundSchema, } from "./alertevent.js";
import { Extraction$inboundSchema, Extraction$outboundSchema, } from "./extraction.js";
import { Latency$inboundSchema, Latency$outboundSchema, } from "./latency.js";
import { Principal$inboundSchema, Principal$outboundSchema, } from "./principal.js";
/**
 * Tell what was the decision about the data.
 */
export const ScanresponseDecision = {
    Deny: "Deny",
    Allow: "Allow",
    Ask: "Ask",
    Bypassed: "Bypassed",
    ForbiddenUser: "ForbiddenUser",
};
/**
 * The type of text.
 */
export const ScanresponseType = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
export const ScanresponseDecision$inboundSchema = z.nativeEnum(ScanresponseDecision);
/** @internal */
export const ScanresponseDecision$outboundSchema = ScanresponseDecision$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScanresponseDecision$;
(function (ScanresponseDecision$) {
    /** @deprecated use `ScanresponseDecision$inboundSchema` instead. */
    ScanresponseDecision$.inboundSchema = ScanresponseDecision$inboundSchema;
    /** @deprecated use `ScanresponseDecision$outboundSchema` instead. */
    ScanresponseDecision$.outboundSchema = ScanresponseDecision$outboundSchema;
})(ScanresponseDecision$ || (ScanresponseDecision$ = {}));
/** @internal */
export const ScanresponseType$inboundSchema = z.nativeEnum(ScanresponseType);
/** @internal */
export const ScanresponseType$outboundSchema = ScanresponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ScanresponseType$;
(function (ScanresponseType$) {
    /** @deprecated use `ScanresponseType$inboundSchema` instead. */
    ScanresponseType$.inboundSchema = ScanresponseType$inboundSchema;
    /** @deprecated use `ScanresponseType$outboundSchema` instead. */
    ScanresponseType$.outboundSchema = ScanresponseType$outboundSchema;
})(ScanresponseType$ || (ScanresponseType$ = {}));
/** @internal */
export const Scanresponse$inboundSchema = z.object({
    ID: z.string().optional(),
    alerts: z.array(Alertevent$inboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: ScanresponseDecision$inboundSchema.optional(),
    extractions: z.array(Extraction$inboundSchema).optional(),
    hash: z.string().optional(),
    latency: Latency$inboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: Principal$inboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    type: ScanresponseType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ID": "id",
    });
});
/** @internal */
export const Scanresponse$outboundSchema = z.object({
    id: z.string().optional(),
    alerts: z.array(Alertevent$outboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: ScanresponseDecision$outboundSchema.optional(),
    extractions: z.array(Extraction$outboundSchema).optional(),
    hash: z.string().optional(),
    latency: Latency$outboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: Principal$outboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    type: ScanresponseType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        id: "ID",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Scanresponse$;
(function (Scanresponse$) {
    /** @deprecated use `Scanresponse$inboundSchema` instead. */
    Scanresponse$.inboundSchema = Scanresponse$inboundSchema;
    /** @deprecated use `Scanresponse$outboundSchema` instead. */
    Scanresponse$.outboundSchema = Scanresponse$outboundSchema;
})(Scanresponse$ || (Scanresponse$ = {}));
export function scanresponseToJSON(scanresponse) {
    return JSON.stringify(Scanresponse$outboundSchema.parse(scanresponse));
}
export function scanresponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Scanresponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scanresponse' from JSON`);
}
//# sourceMappingURL=scanresponse.js.map