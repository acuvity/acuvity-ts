import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * PoliceExternalUser holds the information about the remote user for a
 *
 * @remarks
 * PoliceRequest.
 */
export type Policeexternaluser = {
    /**
     * List of claims extracted from the user query.
     */
    claims: Array<string>;
    /**
     * The name of the external user.
     */
    name: string;
};
/** @internal */
export declare const Policeexternaluser$inboundSchema: z.ZodType<Policeexternaluser, z.ZodTypeDef, unknown>;
/** @internal */
export type Policeexternaluser$Outbound = {
    claims: Array<string>;
    name: string;
};
/** @internal */
export declare const Policeexternaluser$outboundSchema: z.ZodType<Policeexternaluser$Outbound, z.ZodTypeDef, Policeexternaluser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Policeexternaluser$ {
    /** @deprecated use `Policeexternaluser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Policeexternaluser, z.ZodTypeDef, unknown>;
    /** @deprecated use `Policeexternaluser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Policeexternaluser$Outbound, z.ZodTypeDef, Policeexternaluser>;
    /** @deprecated use `Policeexternaluser$Outbound` instead. */
    type Outbound = Policeexternaluser$Outbound;
}
export declare function policeexternaluserToJSON(policeexternaluser: Policeexternaluser): string;
export declare function policeexternaluserFromJSON(jsonString: string): SafeParseResult<Policeexternaluser, SDKValidationError>;
//# sourceMappingURL=policeexternaluser.d.ts.map