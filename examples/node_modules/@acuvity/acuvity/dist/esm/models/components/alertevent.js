/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Principal$inboundSchema, Principal$outboundSchema, } from "./principal.js";
/** @internal */
export const Alertevent$inboundSchema = z.object({
    alertDefinition: z.string(),
    alertDefinitionNamespace: z.string().optional(),
    principal: Principal$inboundSchema,
    provider: z.string().optional(),
    timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
});
/** @internal */
export const Alertevent$outboundSchema = z.object({
    alertDefinition: z.string(),
    alertDefinitionNamespace: z.string().optional(),
    principal: Principal$outboundSchema,
    provider: z.string().optional(),
    timestamp: z.date().transform(v => v.toISOString()).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Alertevent$;
(function (Alertevent$) {
    /** @deprecated use `Alertevent$inboundSchema` instead. */
    Alertevent$.inboundSchema = Alertevent$inboundSchema;
    /** @deprecated use `Alertevent$outboundSchema` instead. */
    Alertevent$.outboundSchema = Alertevent$outboundSchema;
})(Alertevent$ || (Alertevent$ = {}));
export function alerteventToJSON(alertevent) {
    return JSON.stringify(Alertevent$outboundSchema.parse(alertevent));
}
export function alerteventFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Alertevent$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Alertevent' from JSON`);
}
//# sourceMappingURL=alertevent.js.map