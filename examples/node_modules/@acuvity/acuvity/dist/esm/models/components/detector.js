/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Detector$inboundSchema = z.object({
    description: z.string().optional(),
    group: z.string().optional(),
    label: z.string().optional(),
    name: z.string().optional(),
    positional: z.boolean().optional(),
});
/** @internal */
export const Detector$outboundSchema = z.object({
    description: z.string().optional(),
    group: z.string().optional(),
    label: z.string().optional(),
    name: z.string().optional(),
    positional: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Detector$;
(function (Detector$) {
    /** @deprecated use `Detector$inboundSchema` instead. */
    Detector$.inboundSchema = Detector$inboundSchema;
    /** @deprecated use `Detector$outboundSchema` instead. */
    Detector$.outboundSchema = Detector$outboundSchema;
})(Detector$ || (Detector$ = {}));
export function detectorToJSON(detector) {
    return JSON.stringify(Detector$outboundSchema.parse(detector));
}
export function detectorFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Detector$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Detector' from JSON`);
}
//# sourceMappingURL=detector.js.map