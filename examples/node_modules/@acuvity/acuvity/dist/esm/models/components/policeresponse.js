/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Alertevent$inboundSchema, Alertevent$outboundSchema, } from "./alertevent.js";
import { Extraction$inboundSchema, Extraction$outboundSchema, } from "./extraction.js";
import { Latency$inboundSchema, Latency$outboundSchema, } from "./latency.js";
import { Principal$inboundSchema, Principal$outboundSchema, } from "./principal.js";
/**
 * Tell what was the decision about the data.
 */
export const Decision = {
    Deny: "Deny",
    Allow: "Allow",
    Ask: "Ask",
    Bypassed: "Bypassed",
    ForbiddenUser: "ForbiddenUser",
};
/**
 * The type of text.
 */
export const PoliceresponseType = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
export const Decision$inboundSchema = z
    .nativeEnum(Decision);
/** @internal */
export const Decision$outboundSchema = Decision$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Decision$;
(function (Decision$) {
    /** @deprecated use `Decision$inboundSchema` instead. */
    Decision$.inboundSchema = Decision$inboundSchema;
    /** @deprecated use `Decision$outboundSchema` instead. */
    Decision$.outboundSchema = Decision$outboundSchema;
})(Decision$ || (Decision$ = {}));
/** @internal */
export const PoliceresponseType$inboundSchema = z.nativeEnum(PoliceresponseType);
/** @internal */
export const PoliceresponseType$outboundSchema = PoliceresponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PoliceresponseType$;
(function (PoliceresponseType$) {
    /** @deprecated use `PoliceresponseType$inboundSchema` instead. */
    PoliceresponseType$.inboundSchema = PoliceresponseType$inboundSchema;
    /** @deprecated use `PoliceresponseType$outboundSchema` instead. */
    PoliceresponseType$.outboundSchema = PoliceresponseType$outboundSchema;
})(PoliceresponseType$ || (PoliceresponseType$ = {}));
/** @internal */
export const Policeresponse$inboundSchema = z.object({
    ID: z.string().optional(),
    alerts: z.array(Alertevent$inboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: Decision$inboundSchema.optional(),
    extractions: z.array(Extraction$inboundSchema).optional(),
    hash: z.string().optional(),
    latency: Latency$inboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: Principal$inboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    type: PoliceresponseType$inboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        "ID": "id",
    });
});
/** @internal */
export const Policeresponse$outboundSchema = z.object({
    id: z.string().optional(),
    alerts: z.array(Alertevent$outboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: Decision$outboundSchema.optional(),
    extractions: z.array(Extraction$outboundSchema).optional(),
    hash: z.string().optional(),
    latency: Latency$outboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: Principal$outboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    type: PoliceresponseType$outboundSchema.optional(),
}).transform((v) => {
    return remap$(v, {
        id: "ID",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Policeresponse$;
(function (Policeresponse$) {
    /** @deprecated use `Policeresponse$inboundSchema` instead. */
    Policeresponse$.inboundSchema = Policeresponse$inboundSchema;
    /** @deprecated use `Policeresponse$outboundSchema` instead. */
    Policeresponse$.outboundSchema = Policeresponse$outboundSchema;
})(Policeresponse$ || (Policeresponse$ = {}));
export function policeresponseToJSON(policeresponse) {
    return JSON.stringify(Policeresponse$outboundSchema.parse(policeresponse));
}
export function policeresponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Policeresponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Policeresponse' from JSON`);
}
//# sourceMappingURL=policeresponse.js.map