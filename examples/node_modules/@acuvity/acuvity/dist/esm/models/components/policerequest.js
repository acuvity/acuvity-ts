/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Extractionrequest$inboundSchema, Extractionrequest$outboundSchema, } from "./extractionrequest.js";
import { Policeexternaluser$inboundSchema, Policeexternaluser$outboundSchema, } from "./policeexternaluser.js";
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export const Anonymization = {
    FixedSize: "FixedSize",
    VariableSize: "VariableSize",
};
/**
 * The type of text.
 */
export const Type = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
export const Anonymization$inboundSchema = z.nativeEnum(Anonymization);
/** @internal */
export const Anonymization$outboundSchema = Anonymization$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Anonymization$;
(function (Anonymization$) {
    /** @deprecated use `Anonymization$inboundSchema` instead. */
    Anonymization$.inboundSchema = Anonymization$inboundSchema;
    /** @deprecated use `Anonymization$outboundSchema` instead. */
    Anonymization$.outboundSchema = Anonymization$outboundSchema;
})(Anonymization$ || (Anonymization$ = {}));
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const Policerequest$inboundSchema = z.object({
    annotations: z.record(z.string()).optional(),
    anonymization: Anonymization$inboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    extractions: z.array(Extractionrequest$inboundSchema).optional(),
    messages: z.array(z.string()).optional(),
    provider: z.string().optional(),
    type: Type$inboundSchema.optional(),
    user: Policeexternaluser$inboundSchema.optional(),
});
/** @internal */
export const Policerequest$outboundSchema = z.object({
    annotations: z.record(z.string()).optional(),
    anonymization: Anonymization$outboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    extractions: z.array(Extractionrequest$outboundSchema).optional(),
    messages: z.array(z.string()).optional(),
    provider: z.string().optional(),
    type: Type$outboundSchema.optional(),
    user: Policeexternaluser$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Policerequest$;
(function (Policerequest$) {
    /** @deprecated use `Policerequest$inboundSchema` instead. */
    Policerequest$.inboundSchema = Policerequest$inboundSchema;
    /** @deprecated use `Policerequest$outboundSchema` instead. */
    Policerequest$.outboundSchema = Policerequest$outboundSchema;
})(Policerequest$ || (Policerequest$ = {}));
export function policerequestToJSON(policerequest) {
    return JSON.stringify(Policerequest$outboundSchema.parse(policerequest));
}
export function policerequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Policerequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Policerequest' from JSON`);
}
//# sourceMappingURL=policerequest.js.map