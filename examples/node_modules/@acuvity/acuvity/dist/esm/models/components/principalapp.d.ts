import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Describes the principal information of an application.
 */
export type Principalapp = {
    /**
     * The list of labels attached to an application request.
     */
    labels?: Array<string> | undefined;
    /**
     * The name of the application.
     */
    name?: string | undefined;
    /**
     * The tier of the application request.
     */
    tier?: string | undefined;
};
/** @internal */
export declare const Principalapp$inboundSchema: z.ZodType<Principalapp, z.ZodTypeDef, unknown>;
/** @internal */
export type Principalapp$Outbound = {
    labels?: Array<string> | undefined;
    name?: string | undefined;
    tier?: string | undefined;
};
/** @internal */
export declare const Principalapp$outboundSchema: z.ZodType<Principalapp$Outbound, z.ZodTypeDef, Principalapp>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Principalapp$ {
    /** @deprecated use `Principalapp$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Principalapp, z.ZodTypeDef, unknown>;
    /** @deprecated use `Principalapp$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Principalapp$Outbound, z.ZodTypeDef, Principalapp>;
    /** @deprecated use `Principalapp$Outbound` instead. */
    type Outbound = Principalapp$Outbound;
}
export declare function principalappToJSON(principalapp: Principalapp): string;
export declare function principalappFromJSON(jsonString: string): SafeParseResult<Principalapp, SDKValidationError>;
//# sourceMappingURL=principalapp.d.ts.map