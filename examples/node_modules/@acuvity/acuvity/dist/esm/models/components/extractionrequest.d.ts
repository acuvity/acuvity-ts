import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Represents the extraction that the user wants to extract.
 */
export type Extractionrequest = {
    /**
     * Annotations attached to the extraction.
     */
    annotations?: {
        [k: string]: string;
    } | undefined;
    /**
     * The binary data to request extraction for.
     */
    data?: string | undefined;
    /**
     * If true, this extraction is for internal use only. This can be used by agentic
     *
     * @remarks
     * systems to mark an extraction as internal only as opposed to user facing.
     */
    internal?: boolean | undefined;
    /**
     * A means of distinguishing what was extracted, such as prompt, input file or
     *
     * @remarks
     * code.
     */
    label?: string | undefined;
};
/** @internal */
export declare const Extractionrequest$inboundSchema: z.ZodType<Extractionrequest, z.ZodTypeDef, unknown>;
/** @internal */
export type Extractionrequest$Outbound = {
    annotations?: {
        [k: string]: string;
    } | undefined;
    data?: string | undefined;
    internal?: boolean | undefined;
    label?: string | undefined;
};
/** @internal */
export declare const Extractionrequest$outboundSchema: z.ZodType<Extractionrequest$Outbound, z.ZodTypeDef, Extractionrequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Extractionrequest$ {
    /** @deprecated use `Extractionrequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Extractionrequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Extractionrequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Extractionrequest$Outbound, z.ZodTypeDef, Extractionrequest>;
    /** @deprecated use `Extractionrequest$Outbound` instead. */
    type Outbound = Extractionrequest$Outbound;
}
export declare function extractionrequestToJSON(extractionrequest: Extractionrequest): string;
export declare function extractionrequestFromJSON(jsonString: string): SafeParseResult<Extractionrequest, SDKValidationError>;
//# sourceMappingURL=extractionrequest.d.ts.map