/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Principalapp$inboundSchema, Principalapp$outboundSchema, } from "./principalapp.js";
import { Principaluser$inboundSchema, Principaluser$outboundSchema, } from "./principaluser.js";
/**
 * The type of authentication.
 */
export const AuthType = {
    Certificate: "Certificate",
    UserToken: "UserToken",
    AppToken: "AppToken",
    Hostname: "Hostname",
    Token: "Token",
    TierToken: "TierToken",
    External: "External",
};
/**
 * The type of principal.
 */
export const PrincipalType = {
    User: "User",
    App: "App",
};
/** @internal */
export const AuthType$inboundSchema = z
    .nativeEnum(AuthType);
/** @internal */
export const AuthType$outboundSchema = AuthType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var AuthType$;
(function (AuthType$) {
    /** @deprecated use `AuthType$inboundSchema` instead. */
    AuthType$.inboundSchema = AuthType$inboundSchema;
    /** @deprecated use `AuthType$outboundSchema` instead. */
    AuthType$.outboundSchema = AuthType$outboundSchema;
})(AuthType$ || (AuthType$ = {}));
/** @internal */
export const PrincipalType$inboundSchema = z.nativeEnum(PrincipalType);
/** @internal */
export const PrincipalType$outboundSchema = PrincipalType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PrincipalType$;
(function (PrincipalType$) {
    /** @deprecated use `PrincipalType$inboundSchema` instead. */
    PrincipalType$.inboundSchema = PrincipalType$inboundSchema;
    /** @deprecated use `PrincipalType$outboundSchema` instead. */
    PrincipalType$.outboundSchema = PrincipalType$outboundSchema;
})(PrincipalType$ || (PrincipalType$ = {}));
/** @internal */
export const Principal$inboundSchema = z.object({
    app: Principalapp$inboundSchema.optional(),
    authType: AuthType$inboundSchema.optional(),
    claims: z.array(z.string()).optional(),
    team: z.string().optional(),
    tokenName: z.string().optional(),
    type: PrincipalType$inboundSchema,
    user: Principaluser$inboundSchema.optional(),
});
/** @internal */
export const Principal$outboundSchema = z.object({
    app: Principalapp$outboundSchema.optional(),
    authType: AuthType$outboundSchema.optional(),
    claims: z.array(z.string()).optional(),
    team: z.string().optional(),
    tokenName: z.string().optional(),
    type: PrincipalType$outboundSchema,
    user: Principaluser$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Principal$;
(function (Principal$) {
    /** @deprecated use `Principal$inboundSchema` instead. */
    Principal$.inboundSchema = Principal$inboundSchema;
    /** @deprecated use `Principal$outboundSchema` instead. */
    Principal$.outboundSchema = Principal$outboundSchema;
})(Principal$ || (Principal$ = {}));
export function principalToJSON(principal) {
    return JSON.stringify(Principal$outboundSchema.parse(principal));
}
export function principalFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Principal$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Principal' from JSON`);
}
//# sourceMappingURL=principal.js.map