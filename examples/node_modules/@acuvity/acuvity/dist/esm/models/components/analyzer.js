/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Analyzermodel$inboundSchema, Analyzermodel$outboundSchema, } from "./analyzermodel.js";
import { Detector$inboundSchema, Detector$outboundSchema, } from "./detector.js";
/** @internal */
export const Analyzer$inboundSchema = z.object({
    ID: z.string().optional(),
    description: z.string().optional(),
    detectors: z.array(Detector$inboundSchema).optional(),
    enabled: z.boolean().optional(),
    group: z.string().optional(),
    models: z.array(Analyzermodel$inboundSchema).optional(),
    name: z.string().optional(),
    namespace: z.string().optional(),
    triggers: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "ID": "id",
    });
});
/** @internal */
export const Analyzer$outboundSchema = z.object({
    id: z.string().optional(),
    description: z.string().optional(),
    detectors: z.array(Detector$outboundSchema).optional(),
    enabled: z.boolean().optional(),
    group: z.string().optional(),
    models: z.array(Analyzermodel$outboundSchema).optional(),
    name: z.string().optional(),
    namespace: z.string().optional(),
    triggers: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        id: "ID",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Analyzer$;
(function (Analyzer$) {
    /** @deprecated use `Analyzer$inboundSchema` instead. */
    Analyzer$.inboundSchema = Analyzer$inboundSchema;
    /** @deprecated use `Analyzer$outboundSchema` instead. */
    Analyzer$.outboundSchema = Analyzer$outboundSchema;
})(Analyzer$ || (Analyzer$ = {}));
export function analyzerToJSON(analyzer) {
    return JSON.stringify(Analyzer$outboundSchema.parse(analyzer));
}
export function analyzerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Analyzer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Analyzer' from JSON`);
}
//# sourceMappingURL=analyzer.js.map