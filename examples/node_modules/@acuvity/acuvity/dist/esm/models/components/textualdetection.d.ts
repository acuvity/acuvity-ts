import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * The type of detection.
 */
export declare const TextualdetectionType: {
    readonly Keyword: "Keyword";
    readonly Pii: "PII";
    readonly Secret: "Secret";
};
/**
 * The type of detection.
 */
export type TextualdetectionType = ClosedEnum<typeof TextualdetectionType>;
/**
 * Represents a textual detection done by policy.
 */
export type Textualdetection = {
    /**
     * The end position of the detection in the original data.
     */
    end?: number | undefined;
    /**
     * The key that is used in the name's place, If empty, a sequence of X's are used.
     */
    key?: string | undefined;
    /**
     * The name of the detection.
     */
    name?: string | undefined;
    /**
     * If true this detection has been redacted.
     */
    redacted?: boolean | undefined;
    /**
     * The end position of the detection in the redacted data.
     */
    redactedEnd?: number | undefined;
    /**
     * The start position of the detection in the redacted data.
     */
    redactedStart?: number | undefined;
    /**
     * The confidence score of the detection.
     */
    score?: number | undefined;
    /**
     * The start position of the detection in the original data.
     */
    start?: number | undefined;
    /**
     * The type of detection.
     */
    type?: TextualdetectionType | undefined;
};
/** @internal */
export declare const TextualdetectionType$inboundSchema: z.ZodNativeEnum<typeof TextualdetectionType>;
/** @internal */
export declare const TextualdetectionType$outboundSchema: z.ZodNativeEnum<typeof TextualdetectionType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TextualdetectionType$ {
    /** @deprecated use `TextualdetectionType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Keyword: "Keyword";
        readonly Pii: "PII";
        readonly Secret: "Secret";
    }>;
    /** @deprecated use `TextualdetectionType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Keyword: "Keyword";
        readonly Pii: "PII";
        readonly Secret: "Secret";
    }>;
}
/** @internal */
export declare const Textualdetection$inboundSchema: z.ZodType<Textualdetection, z.ZodTypeDef, unknown>;
/** @internal */
export type Textualdetection$Outbound = {
    end?: number | undefined;
    key?: string | undefined;
    name?: string | undefined;
    redacted?: boolean | undefined;
    redactedEnd?: number | undefined;
    redactedStart?: number | undefined;
    score?: number | undefined;
    start?: number | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const Textualdetection$outboundSchema: z.ZodType<Textualdetection$Outbound, z.ZodTypeDef, Textualdetection>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Textualdetection$ {
    /** @deprecated use `Textualdetection$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Textualdetection, z.ZodTypeDef, unknown>;
    /** @deprecated use `Textualdetection$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Textualdetection$Outbound, z.ZodTypeDef, Textualdetection>;
    /** @deprecated use `Textualdetection$Outbound` instead. */
    type Outbound = Textualdetection$Outbound;
}
export declare function textualdetectionToJSON(textualdetection: Textualdetection): string;
export declare function textualdetectionFromJSON(jsonString: string): SafeParseResult<Textualdetection, SDKValidationError>;
//# sourceMappingURL=textualdetection.d.ts.map