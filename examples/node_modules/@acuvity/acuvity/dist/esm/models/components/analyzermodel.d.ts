import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Represent an analyzer model.
 */
export type Analyzermodel = {
    /**
     * The name of the model.
     */
    name?: string | undefined;
    /**
     * The revision of the model.
     */
    revision?: string | undefined;
};
/** @internal */
export declare const Analyzermodel$inboundSchema: z.ZodType<Analyzermodel, z.ZodTypeDef, unknown>;
/** @internal */
export type Analyzermodel$Outbound = {
    name?: string | undefined;
    revision?: string | undefined;
};
/** @internal */
export declare const Analyzermodel$outboundSchema: z.ZodType<Analyzermodel$Outbound, z.ZodTypeDef, Analyzermodel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Analyzermodel$ {
    /** @deprecated use `Analyzermodel$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Analyzermodel, z.ZodTypeDef, unknown>;
    /** @deprecated use `Analyzermodel$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Analyzermodel$Outbound, z.ZodTypeDef, Analyzermodel>;
    /** @deprecated use `Analyzermodel$Outbound` instead. */
    type Outbound = Analyzermodel$Outbound;
}
export declare function analyzermodelToJSON(analyzermodel: Analyzermodel): string;
export declare function analyzermodelFromJSON(jsonString: string): SafeParseResult<Analyzermodel, SDKValidationError>;
//# sourceMappingURL=analyzermodel.d.ts.map