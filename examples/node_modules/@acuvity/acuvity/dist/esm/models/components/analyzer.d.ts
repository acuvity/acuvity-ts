import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Analyzermodel, Analyzermodel$Outbound } from "./analyzermodel.js";
import { Detector, Detector$Outbound } from "./detector.js";
/**
 * Represents an analyzer.
 */
export type Analyzer = {
    /**
     * ID is the identifier of the object.
     */
    id?: string | undefined;
    /**
     * The description of the analyzer.
     */
    description?: string | undefined;
    /**
     * The detectors the analyzer can use.
     */
    detectors?: Array<Detector> | undefined;
    /**
     * Tell if the analyzer is enabled by default.
     */
    enabled?: boolean | undefined;
    /**
     * The group the analyzer belongs to.
     */
    group?: string | undefined;
    /**
     * The models used by the analyzer.
     */
    models?: Array<Analyzermodel> | undefined;
    /**
     * The name of the analyzer.
     */
    name?: string | undefined;
    /**
     * The namespace of the object.
     */
    namespace?: string | undefined;
    /**
     * A list of trigger or globl pattern that the analyzer will react on.
     *
     * @remarks
     * A trigger is the detector Group and Name separated with a /.
     */
    triggers?: Array<string> | undefined;
};
/** @internal */
export declare const Analyzer$inboundSchema: z.ZodType<Analyzer, z.ZodTypeDef, unknown>;
/** @internal */
export type Analyzer$Outbound = {
    ID?: string | undefined;
    description?: string | undefined;
    detectors?: Array<Detector$Outbound> | undefined;
    enabled?: boolean | undefined;
    group?: string | undefined;
    models?: Array<Analyzermodel$Outbound> | undefined;
    name?: string | undefined;
    namespace?: string | undefined;
    triggers?: Array<string> | undefined;
};
/** @internal */
export declare const Analyzer$outboundSchema: z.ZodType<Analyzer$Outbound, z.ZodTypeDef, Analyzer>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Analyzer$ {
    /** @deprecated use `Analyzer$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Analyzer, z.ZodTypeDef, unknown>;
    /** @deprecated use `Analyzer$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Analyzer$Outbound, z.ZodTypeDef, Analyzer>;
    /** @deprecated use `Analyzer$Outbound` instead. */
    type Outbound = Analyzer$Outbound;
}
export declare function analyzerToJSON(analyzer: Analyzer): string;
export declare function analyzerFromJSON(jsonString: string): SafeParseResult<Analyzer, SDKValidationError>;
//# sourceMappingURL=analyzer.d.ts.map