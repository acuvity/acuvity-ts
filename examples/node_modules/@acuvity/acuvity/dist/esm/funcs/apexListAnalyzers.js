/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import * as M from "../lib/matchers.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import * as errors from "../models/errors/index.js";
/**
 * List of all available analyzers.
 */
export async function apexListAnalyzers(client, options) {
    const path = pathToFunc("/_acuvity/analyzers")();
    const headers = new Headers({
        Accept: "application/json",
    });
    const securityInput = await extractSecurity(client._options.security);
    const requestSecurity = resolveGlobalSecurity(securityInput);
    const context = {
        operationID: "get-all-Analyzers",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.security,
        retryConfig: options?.retries
            || client._options.retryConfig
            || {
                strategy: "backoff",
                backoff: {
                    initialInterval: 1000,
                    maxInterval: 60000,
                    exponent: 1.5,
                    maxElapsedTime: 300000,
                },
                retryConnectionErrors: true,
            }
            || { strategy: "none" },
        retryCodes: options?.retryCodes
            || ["408", "423", "429", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || 60000,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "401", "4XX", "500", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields = {
        HttpMeta: { Response: response, Request: req },
    };
    const [result] = await M.match(M.json(200, z.array(components.Analyzer$inboundSchema)), M.jsonErr([400, 401, 500], errors.Elementalerror$inboundSchema), M.fail(["4XX", "5XX"]))(response, { extraFields: responseFields });
    if (!result.ok) {
        return result;
    }
    return result;
}
//# sourceMappingURL=apexListAnalyzers.js.map