import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Extractionrequest, Extractionrequest$Outbound } from "./extractionrequest.js";
import { Policeexternaluser, Policeexternaluser$Outbound } from "./policeexternaluser.js";
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export declare const Anonymization: {
    readonly FixedSize: "FixedSize";
    readonly VariableSize: "VariableSize";
};
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
export type Anonymization = ClosedEnum<typeof Anonymization>;
/**
 * The type of text.
 */
export declare const Type: {
    readonly Input: "Input";
    readonly Output: "Output";
};
/**
 * The type of text.
 */
export type Type = ClosedEnum<typeof Type>;
/**
 * This is a scan and police request.
 */
export type Policerequest = {
    /**
     * Annotations attached to the extraction.
     */
    annotations?: {
        [k: string]: string;
    } | undefined;
    /**
     * How to anonymize the data. If deanonymize is true, then VariablSize is required.
     */
    anonymization?: Anonymization | undefined;
    /**
     * In the case of a contentPolicy that asks for a confirmation, this is the
     *
     * @remarks
     * hash you must send back to bypass the block. This is only useful when a
     * content policy has been set or is evaluated remotely.
     */
    bypassHash?: string | undefined;
    /**
     * The extractions to request.
     */
    extractions?: Array<Extractionrequest> | undefined;
    /**
     * Messages to process and provide detections for. Use data in extractions for
     *
     * @remarks
     * processing binary data.
     */
    messages?: Array<string> | undefined;
    /**
     * The name of the provider to use for policy resolutions. If not set, it will
     *
     * @remarks
     * default to the principal name (the application itself).
     */
    provider?: string | undefined;
    /**
     * The type of text.
     */
    type?: Type | undefined;
    /**
     * PoliceExternalUser holds the information about the remote user for a
     *
     * @remarks
     * PoliceRequest.
     */
    user?: Policeexternaluser | undefined;
};
/** @internal */
export declare const Anonymization$inboundSchema: z.ZodNativeEnum<typeof Anonymization>;
/** @internal */
export declare const Anonymization$outboundSchema: z.ZodNativeEnum<typeof Anonymization>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Anonymization$ {
    /** @deprecated use `Anonymization$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly FixedSize: "FixedSize";
        readonly VariableSize: "VariableSize";
    }>;
    /** @deprecated use `Anonymization$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly FixedSize: "FixedSize";
        readonly VariableSize: "VariableSize";
    }>;
}
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
}
/** @internal */
export declare const Policerequest$inboundSchema: z.ZodType<Policerequest, z.ZodTypeDef, unknown>;
/** @internal */
export type Policerequest$Outbound = {
    annotations?: {
        [k: string]: string;
    } | undefined;
    anonymization: string;
    bypassHash?: string | undefined;
    extractions?: Array<Extractionrequest$Outbound> | undefined;
    messages?: Array<string> | undefined;
    provider?: string | undefined;
    type?: string | undefined;
    user?: Policeexternaluser$Outbound | undefined;
};
/** @internal */
export declare const Policerequest$outboundSchema: z.ZodType<Policerequest$Outbound, z.ZodTypeDef, Policerequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Policerequest$ {
    /** @deprecated use `Policerequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Policerequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Policerequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Policerequest$Outbound, z.ZodTypeDef, Policerequest>;
    /** @deprecated use `Policerequest$Outbound` instead. */
    type Outbound = Policerequest$Outbound;
}
export declare function policerequestToJSON(policerequest: Policerequest): string;
export declare function policerequestFromJSON(jsonString: string): SafeParseResult<Policerequest, SDKValidationError>;
//# sourceMappingURL=policerequest.d.ts.map