import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Modality, Modality$Outbound } from "./modality.js";
import { Textualdetection, Textualdetection$Outbound } from "./textualdetection.js";
/**
 * Represents the extracted information to log.
 */
export type Extraction = {
    /**
     * The PIIs found during classification.
     */
    piIs?: {
        [k: string]: number;
    } | undefined;
    /**
     * Annotations attached to the extraction.
     */
    annotations?: {
        [k: string]: string;
    } | undefined;
    /**
     * The categories are remapping of the modalities in a more human friendly way.
     */
    categories?: Array<Modality> | undefined;
    /**
     * The level of general confidentiality of the input.
     */
    confidentiality?: number | undefined;
    /**
     * The data extracted.
     */
    data?: string | undefined;
    /**
     * The detections found while applying policies.
     */
    detections?: Array<Textualdetection> | undefined;
    /**
     * The various exploits attempts.
     */
    exploits?: {
        [k: string]: number;
    } | undefined;
    /**
     * The hash of the extraction.
     */
    hash?: string | undefined;
    /**
     * The estimated intent embodied into the text.
     */
    intent?: {
        [k: string]: number;
    } | undefined;
    /**
     * If true, this extraction is for internal use only. This can be used by agentic
     *
     * @remarks
     * systems to mark an extraction as internal only as opposed to user facing.
     */
    internal?: boolean | undefined;
    /**
     * The keywords found during classification.
     */
    keywords?: {
        [k: string]: number;
    } | undefined;
    /**
     * A means of distinguishing what was extracted, such as prompt, input file or
     *
     * @remarks
     * code.
     */
    label?: string | undefined;
    /**
     * The language of the classification.
     */
    languages?: {
        [k: string]: number;
    } | undefined;
    /**
     * The modalities of data detected in the data.
     */
    modalities?: Array<Modality> | undefined;
    /**
     * The level of general organization relevance of the input.
     */
    relevance?: number | undefined;
    /**
     * The secrets found during classification.
     */
    secrets?: {
        [k: string]: number;
    } | undefined;
    /**
     * The topic of the classification.
     */
    topics?: {
        [k: string]: number;
    } | undefined;
};
/** @internal */
export declare const Extraction$inboundSchema: z.ZodType<Extraction, z.ZodTypeDef, unknown>;
/** @internal */
export type Extraction$Outbound = {
    PIIs?: {
        [k: string]: number;
    } | undefined;
    annotations?: {
        [k: string]: string;
    } | undefined;
    categories?: Array<Modality$Outbound> | undefined;
    confidentiality?: number | undefined;
    data?: string | undefined;
    detections?: Array<Textualdetection$Outbound> | undefined;
    exploits?: {
        [k: string]: number;
    } | undefined;
    hash?: string | undefined;
    intent?: {
        [k: string]: number;
    } | undefined;
    internal?: boolean | undefined;
    keywords?: {
        [k: string]: number;
    } | undefined;
    label?: string | undefined;
    languages?: {
        [k: string]: number;
    } | undefined;
    modalities?: Array<Modality$Outbound> | undefined;
    relevance?: number | undefined;
    secrets?: {
        [k: string]: number;
    } | undefined;
    topics?: {
        [k: string]: number;
    } | undefined;
};
/** @internal */
export declare const Extraction$outboundSchema: z.ZodType<Extraction$Outbound, z.ZodTypeDef, Extraction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Extraction$ {
    /** @deprecated use `Extraction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Extraction, z.ZodTypeDef, unknown>;
    /** @deprecated use `Extraction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Extraction$Outbound, z.ZodTypeDef, Extraction>;
    /** @deprecated use `Extraction$Outbound` instead. */
    type Outbound = Extraction$Outbound;
}
export declare function extractionToJSON(extraction: Extraction): string;
export declare function extractionFromJSON(jsonString: string): SafeParseResult<Extraction, SDKValidationError>;
//# sourceMappingURL=extraction.d.ts.map