import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Describes the principal information of a user.
 */
export type Principaluser = {
    /**
     * Identification bit that will be used to identify the origin of the request.
     */
    name?: string | undefined;
};
/** @internal */
export declare const Principaluser$inboundSchema: z.ZodType<Principaluser, z.ZodTypeDef, unknown>;
/** @internal */
export type Principaluser$Outbound = {
    name?: string | undefined;
};
/** @internal */
export declare const Principaluser$outboundSchema: z.ZodType<Principaluser$Outbound, z.ZodTypeDef, Principaluser>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Principaluser$ {
    /** @deprecated use `Principaluser$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Principaluser, z.ZodTypeDef, unknown>;
    /** @deprecated use `Principaluser$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Principaluser$Outbound, z.ZodTypeDef, Principaluser>;
    /** @deprecated use `Principaluser$Outbound` instead. */
    type Outbound = Principaluser$Outbound;
}
export declare function principaluserToJSON(principaluser: Principaluser): string;
export declare function principaluserFromJSON(jsonString: string): SafeParseResult<Principaluser, SDKValidationError>;
//# sourceMappingURL=principaluser.d.ts.map