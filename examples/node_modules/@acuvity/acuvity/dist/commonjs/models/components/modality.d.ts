import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Represents the modality of a some data.
 */
export type Modality = {
    /**
     * The group of data.
     */
    group: string;
    /**
     * The type of data.
     */
    type: string;
};
/** @internal */
export declare const Modality$inboundSchema: z.ZodType<Modality, z.ZodTypeDef, unknown>;
/** @internal */
export type Modality$Outbound = {
    group: string;
    type: string;
};
/** @internal */
export declare const Modality$outboundSchema: z.ZodType<Modality$Outbound, z.ZodTypeDef, Modality>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Modality$ {
    /** @deprecated use `Modality$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Modality, z.ZodTypeDef, unknown>;
    /** @deprecated use `Modality$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Modality$Outbound, z.ZodTypeDef, Modality>;
    /** @deprecated use `Modality$Outbound` instead. */
    type Outbound = Modality$Outbound;
}
export declare function modalityToJSON(modality: Modality): string;
export declare function modalityFromJSON(jsonString: string): SafeParseResult<Modality, SDKValidationError>;
//# sourceMappingURL=modality.d.ts.map