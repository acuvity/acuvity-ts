import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Alertevent, Alertevent$Outbound } from "./alertevent.js";
import { Extraction, Extraction$Outbound } from "./extraction.js";
import { Latency, Latency$Outbound } from "./latency.js";
import { Principal, Principal$Outbound } from "./principal.js";
/**
 * Tell what was the decision about the data.
 */
export declare const ScanresponseDecision: {
    readonly Deny: "Deny";
    readonly Allow: "Allow";
    readonly Ask: "Ask";
    readonly Bypassed: "Bypassed";
    readonly ForbiddenUser: "ForbiddenUser";
};
/**
 * Tell what was the decision about the data.
 */
export type ScanresponseDecision = ClosedEnum<typeof ScanresponseDecision>;
/**
 * The type of text.
 */
export declare const ScanresponseType: {
    readonly Input: "Input";
    readonly Output: "Output";
};
/**
 * The type of text.
 */
export type ScanresponseType = ClosedEnum<typeof ScanresponseType>;
/**
 * This is a scan response.
 */
export type Scanresponse = {
    /**
     * ID is the identifier of the object.
     */
    id?: string | undefined;
    /**
     * List of alerts that got raised during the policy resolution.
     */
    alerts?: Array<Alertevent> | undefined;
    /**
     * Annotations attached to the log.
     */
    annotations?: {
        [k: string]: string;
    } | undefined;
    /**
     * The client used to send the request.
     */
    client?: string | undefined;
    /**
     * The version of the client used to send the request.
     */
    clientVersion?: string | undefined;
    /**
     * Tell what was the decision about the data.
     */
    decision?: ScanresponseDecision | undefined;
    /**
     * The extractions to log.
     */
    extractions?: Array<Extraction> | undefined;
    /**
     * The hash of the input.
     */
    hash?: string | undefined;
    /**
     * Holds information about latencies introduced by Apex.
     */
    latency?: Latency | undefined;
    /**
     * The namespace of the object.
     */
    namespace?: string | undefined;
    /**
     * The name of the particular pipeline that extracted the text.
     */
    pipelineName?: string | undefined;
    /**
     * Describe the principal.
     */
    principal: Principal;
    /**
     * the provider to use.
     */
    provider?: string | undefined;
    /**
     * The various reasons returned by the policy engine.
     */
    reasons?: Array<string> | undefined;
    /**
     * Set the time of the message request.
     */
    time?: Date | undefined;
    /**
     * The type of text.
     */
    type?: ScanresponseType | undefined;
};
/** @internal */
export declare const ScanresponseDecision$inboundSchema: z.ZodNativeEnum<typeof ScanresponseDecision>;
/** @internal */
export declare const ScanresponseDecision$outboundSchema: z.ZodNativeEnum<typeof ScanresponseDecision>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScanresponseDecision$ {
    /** @deprecated use `ScanresponseDecision$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Deny: "Deny";
        readonly Allow: "Allow";
        readonly Ask: "Ask";
        readonly Bypassed: "Bypassed";
        readonly ForbiddenUser: "ForbiddenUser";
    }>;
    /** @deprecated use `ScanresponseDecision$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Deny: "Deny";
        readonly Allow: "Allow";
        readonly Ask: "Ask";
        readonly Bypassed: "Bypassed";
        readonly ForbiddenUser: "ForbiddenUser";
    }>;
}
/** @internal */
export declare const ScanresponseType$inboundSchema: z.ZodNativeEnum<typeof ScanresponseType>;
/** @internal */
export declare const ScanresponseType$outboundSchema: z.ZodNativeEnum<typeof ScanresponseType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ScanresponseType$ {
    /** @deprecated use `ScanresponseType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
    /** @deprecated use `ScanresponseType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Input: "Input";
        readonly Output: "Output";
    }>;
}
/** @internal */
export declare const Scanresponse$inboundSchema: z.ZodType<Scanresponse, z.ZodTypeDef, unknown>;
/** @internal */
export type Scanresponse$Outbound = {
    ID?: string | undefined;
    alerts?: Array<Alertevent$Outbound> | undefined;
    annotations?: {
        [k: string]: string;
    } | undefined;
    client?: string | undefined;
    clientVersion?: string | undefined;
    decision?: string | undefined;
    extractions?: Array<Extraction$Outbound> | undefined;
    hash?: string | undefined;
    latency?: Latency$Outbound | undefined;
    namespace?: string | undefined;
    pipelineName?: string | undefined;
    principal: Principal$Outbound;
    provider?: string | undefined;
    reasons?: Array<string> | undefined;
    time?: string | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const Scanresponse$outboundSchema: z.ZodType<Scanresponse$Outbound, z.ZodTypeDef, Scanresponse>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Scanresponse$ {
    /** @deprecated use `Scanresponse$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Scanresponse, z.ZodTypeDef, unknown>;
    /** @deprecated use `Scanresponse$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Scanresponse$Outbound, z.ZodTypeDef, Scanresponse>;
    /** @deprecated use `Scanresponse$Outbound` instead. */
    type Outbound = Scanresponse$Outbound;
}
export declare function scanresponseToJSON(scanresponse: Scanresponse): string;
export declare function scanresponseFromJSON(jsonString: string): SafeParseResult<Scanresponse, SDKValidationError>;
//# sourceMappingURL=scanresponse.d.ts.map