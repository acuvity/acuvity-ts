"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scanrequest$ = exports.Scanrequest$outboundSchema = exports.Scanrequest$inboundSchema = exports.ScanrequestType$ = exports.ScanrequestType$outboundSchema = exports.ScanrequestType$inboundSchema = exports.ScanrequestAnonymization$ = exports.ScanrequestAnonymization$outboundSchema = exports.ScanrequestAnonymization$inboundSchema = exports.ScanrequestType = exports.ScanrequestAnonymization = void 0;
exports.scanrequestToJSON = scanrequestToJSON;
exports.scanrequestFromJSON = scanrequestFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const extractionrequest_js_1 = require("./extractionrequest.js");
/**
 * How to anonymize the data. If deanonymize is true, then VariablSize is required.
 */
exports.ScanrequestAnonymization = {
    FixedSize: "FixedSize",
    VariableSize: "VariableSize",
};
/**
 * The type of text.
 */
exports.ScanrequestType = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
exports.ScanrequestAnonymization$inboundSchema = z.nativeEnum(exports.ScanrequestAnonymization);
/** @internal */
exports.ScanrequestAnonymization$outboundSchema = exports.ScanrequestAnonymization$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ScanrequestAnonymization$;
(function (ScanrequestAnonymization$) {
    /** @deprecated use `ScanrequestAnonymization$inboundSchema` instead. */
    ScanrequestAnonymization$.inboundSchema = exports.ScanrequestAnonymization$inboundSchema;
    /** @deprecated use `ScanrequestAnonymization$outboundSchema` instead. */
    ScanrequestAnonymization$.outboundSchema = exports.ScanrequestAnonymization$outboundSchema;
})(ScanrequestAnonymization$ || (exports.ScanrequestAnonymization$ = ScanrequestAnonymization$ = {}));
/** @internal */
exports.ScanrequestType$inboundSchema = z.nativeEnum(exports.ScanrequestType);
/** @internal */
exports.ScanrequestType$outboundSchema = exports.ScanrequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ScanrequestType$;
(function (ScanrequestType$) {
    /** @deprecated use `ScanrequestType$inboundSchema` instead. */
    ScanrequestType$.inboundSchema = exports.ScanrequestType$inboundSchema;
    /** @deprecated use `ScanrequestType$outboundSchema` instead. */
    ScanrequestType$.outboundSchema = exports.ScanrequestType$outboundSchema;
})(ScanrequestType$ || (exports.ScanrequestType$ = ScanrequestType$ = {}));
/** @internal */
exports.Scanrequest$inboundSchema = z.object({
    accessPolicy: z.string().optional(),
    analyzers: z.array(z.string()).optional(),
    annotations: z.record(z.string()).optional(),
    anonymization: exports.ScanrequestAnonymization$inboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    contentPolicy: z.string().optional(),
    extractions: z.array(extractionrequest_js_1.Extractionrequest$inboundSchema).optional(),
    keywords: z.array(z.string()).optional(),
    messages: z.array(z.string()).optional(),
    minimalLogging: z.boolean().optional(),
    redactions: z.array(z.string()).optional(),
    type: exports.ScanrequestType$inboundSchema.optional(),
});
/** @internal */
exports.Scanrequest$outboundSchema = z.object({
    accessPolicy: z.string().optional(),
    analyzers: z.array(z.string()).optional(),
    annotations: z.record(z.string()).optional(),
    anonymization: exports.ScanrequestAnonymization$outboundSchema.default("FixedSize"),
    bypassHash: z.string().optional(),
    contentPolicy: z.string().optional(),
    extractions: z.array(extractionrequest_js_1.Extractionrequest$outboundSchema).optional(),
    keywords: z.array(z.string()).optional(),
    messages: z.array(z.string()).optional(),
    minimalLogging: z.boolean().optional(),
    redactions: z.array(z.string()).optional(),
    type: exports.ScanrequestType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Scanrequest$;
(function (Scanrequest$) {
    /** @deprecated use `Scanrequest$inboundSchema` instead. */
    Scanrequest$.inboundSchema = exports.Scanrequest$inboundSchema;
    /** @deprecated use `Scanrequest$outboundSchema` instead. */
    Scanrequest$.outboundSchema = exports.Scanrequest$outboundSchema;
})(Scanrequest$ || (exports.Scanrequest$ = Scanrequest$ = {}));
function scanrequestToJSON(scanrequest) {
    return JSON.stringify(exports.Scanrequest$outboundSchema.parse(scanrequest));
}
function scanrequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Scanrequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Scanrequest' from JSON`);
}
//# sourceMappingURL=scanrequest.js.map