"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policeresponse$ = exports.Policeresponse$outboundSchema = exports.Policeresponse$inboundSchema = exports.PoliceresponseType$ = exports.PoliceresponseType$outboundSchema = exports.PoliceresponseType$inboundSchema = exports.Decision$ = exports.Decision$outboundSchema = exports.Decision$inboundSchema = exports.PoliceresponseType = exports.Decision = void 0;
exports.policeresponseToJSON = policeresponseToJSON;
exports.policeresponseFromJSON = policeresponseFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const alertevent_js_1 = require("./alertevent.js");
const extraction_js_1 = require("./extraction.js");
const latency_js_1 = require("./latency.js");
const principal_js_1 = require("./principal.js");
/**
 * Tell what was the decision about the data.
 */
exports.Decision = {
    Deny: "Deny",
    Allow: "Allow",
    Ask: "Ask",
    Bypassed: "Bypassed",
    ForbiddenUser: "ForbiddenUser",
};
/**
 * The type of text.
 */
exports.PoliceresponseType = {
    Input: "Input",
    Output: "Output",
};
/** @internal */
exports.Decision$inboundSchema = z
    .nativeEnum(exports.Decision);
/** @internal */
exports.Decision$outboundSchema = exports.Decision$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Decision$;
(function (Decision$) {
    /** @deprecated use `Decision$inboundSchema` instead. */
    Decision$.inboundSchema = exports.Decision$inboundSchema;
    /** @deprecated use `Decision$outboundSchema` instead. */
    Decision$.outboundSchema = exports.Decision$outboundSchema;
})(Decision$ || (exports.Decision$ = Decision$ = {}));
/** @internal */
exports.PoliceresponseType$inboundSchema = z.nativeEnum(exports.PoliceresponseType);
/** @internal */
exports.PoliceresponseType$outboundSchema = exports.PoliceresponseType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PoliceresponseType$;
(function (PoliceresponseType$) {
    /** @deprecated use `PoliceresponseType$inboundSchema` instead. */
    PoliceresponseType$.inboundSchema = exports.PoliceresponseType$inboundSchema;
    /** @deprecated use `PoliceresponseType$outboundSchema` instead. */
    PoliceresponseType$.outboundSchema = exports.PoliceresponseType$outboundSchema;
})(PoliceresponseType$ || (exports.PoliceresponseType$ = PoliceresponseType$ = {}));
/** @internal */
exports.Policeresponse$inboundSchema = z.object({
    ID: z.string().optional(),
    alerts: z.array(alertevent_js_1.Alertevent$inboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: exports.Decision$inboundSchema.optional(),
    extractions: z.array(extraction_js_1.Extraction$inboundSchema).optional(),
    hash: z.string().optional(),
    latency: latency_js_1.Latency$inboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: principal_js_1.Principal$inboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    type: exports.PoliceresponseType$inboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ID": "id",
    });
});
/** @internal */
exports.Policeresponse$outboundSchema = z.object({
    id: z.string().optional(),
    alerts: z.array(alertevent_js_1.Alertevent$outboundSchema).optional(),
    annotations: z.record(z.string()).optional(),
    client: z.string().optional(),
    clientVersion: z.string().optional(),
    decision: exports.Decision$outboundSchema.optional(),
    extractions: z.array(extraction_js_1.Extraction$outboundSchema).optional(),
    hash: z.string().optional(),
    latency: latency_js_1.Latency$outboundSchema.optional(),
    namespace: z.string().optional(),
    pipelineName: z.string().optional(),
    principal: principal_js_1.Principal$outboundSchema,
    provider: z.string().optional(),
    reasons: z.array(z.string()).optional(),
    time: z.date().transform(v => v.toISOString()).optional(),
    type: exports.PoliceresponseType$outboundSchema.optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        id: "ID",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Policeresponse$;
(function (Policeresponse$) {
    /** @deprecated use `Policeresponse$inboundSchema` instead. */
    Policeresponse$.inboundSchema = exports.Policeresponse$inboundSchema;
    /** @deprecated use `Policeresponse$outboundSchema` instead. */
    Policeresponse$.outboundSchema = exports.Policeresponse$outboundSchema;
})(Policeresponse$ || (exports.Policeresponse$ = Policeresponse$ = {}));
function policeresponseToJSON(policeresponse) {
    return JSON.stringify(exports.Policeresponse$outboundSchema.parse(policeresponse));
}
function policeresponseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Policeresponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Policeresponse' from JSON`);
}
//# sourceMappingURL=policeresponse.js.map