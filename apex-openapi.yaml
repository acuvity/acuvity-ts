components:
  schemas:
    alertevent:
      description: Represents an alert event raised by a policy.
      properties:
        alertDefinition:
          description: The name of the alert definition that triggered the alert event.
          example: warning-notification
          type: string
        alertDefinitionNamespace:
          description: The namespace of the alert definition.
          type: string
        principal:
          $ref: "#/components/schemas/principal"
        provider:
          description: The provider used that the alert came from.
          type: string
        timestamp:
          description: When the alert event was raised.
          format: date-time
          readOnly: true
          type: string
      required:
        - alertDefinition
        - principal
      type: object
    analyzer:
      description: Represents an analyzer.
      properties:
        ID:
          description: ID is the identifier of the object.
          readOnly: true
          type: string
        description:
          description: The description of the analyzer.
          type: string
        detectionMatchers:
          description: A list of detection matcher that will trigger the analyzer.
          example:
            - confidence: Medium
              group: Text
              name: txt
              operator: min
          items:
            $ref: "#/components/schemas/detectionmatcher"
          type: array
        detectors:
          description: The detectors the analyzer can use.
          items:
            $ref: "#/components/schemas/detector"
          type: array
        enabled:
          description: Tell if the analyzer is enabled by default.
          type: boolean
        group:
          description: The group the analyzer belongs to.
          type: string
        models:
          description: The models used by the analyzer.
          items:
            $ref: "#/components/schemas/analyzermodel"
          type: array
        name:
          description: The name of the analyzer.
          type: string
        namespace:
          description: The namespace of the object.
          readOnly: true
          type: string
      type: object
    analyzermodel:
      description: Represent an analyzer model.
      properties:
        name:
          description: The name of the model.
          type: string
        revision:
          description: The revision of the model.
          type: string
      type: object
    detectionmatcher:
      description: |-
        Represent a detection matcher.
        A Detection Matcher serves as a filtering mechanism for analyzers, determining
        which detections should trigger an analysis. It allows for flexible pattern
        matching on detection attributes such as name, label, and group using glob-style
        wildcards. Additionally, it enables confidence-based filtering by defining
        thresholds and comparison operators. Detection Matchers provide a structured way
        to control when and how analyzers engage with incoming detections.
      properties:
        confidence:
          description: The detection confidence level to operate on.
          enum:
            - Unlikely
            - Low
            - Medium
            - High
        description:
          description: The description of the detection matcher.
          type: string
        group:
          default: "*"
          description: |-
            The group pattern used to match detection group. Supports glob-style wildcards
            (e.g. 'Text*' matches 'Text', 'Text_'). Default value is '*' meaning matching
            any
            detection group.
          example: Text
          type: string
        label:
          default: "*"
          description: |-
            The label pattern used to match detection label. Supports glob-style wildcards
            (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
            detection label.
          example: txt
          type: string
        name:
          default: "*"
          description: |-
            The name pattern used to match detection name. Supports glob-style wildcards
            (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
            detection name.
          example: txt
          type: string
        operator:
          default: Min
          description: |-
            Specifies how to compare the detection's confidence value against the matcher's
            threshold:
            - 'Is': All Detections confidence must exactly match the threshold
            - 'Min': At least one detection confidence must be greater than or equal to the
            threshold
            - 'Max': At least one detection confidence must be less than the threshold
            The default value is 'Min'.
          enum:
            - Is
            - Min
            - Max
      type: object
    detector:
      description: Represent a detector an analyzer can use.
      properties:
        description:
          description: The description of the detection.
          type: string
        group:
          description: The group the detection belongs to.
          type: string
        label:
          description: The label returned by the model.
          type: string
        name:
          description: The name of the detection.
          type: string
        positional:
          description: Tell if the detection is positional.
          type: boolean
      type: object
    elementalerror:
      properties:
        code:
          description: Error code
          type: integer
        data:
          description: Additional error data
          type: object
        description:
          description: Error description
          type: string
        subject:
          description: Error subject
          type: string
        title:
          description: Error title
          type: string
        trace:
          description: Error trace
          type: string
      type: object
    extraction:
      description: Represents the extracted information to log.
      properties:
        PIIs:
          additionalProperties:
            type: number
          description: |-
            The PIIs found during classification.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'PIIs' accross all analyzers.

            Example of PIIs detected: aba_routing_number, address, bank_account,
            bitcoin_wallet, credit_card, driver_license, email_address, itin_number,
            location, medical_license, money_amount, passport_number, person, phone_number,
            ssn.
          example:
            ssn: 0.8
          type: object
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the extraction.
          type: object
        categories:
          description:
            The categories are remapping of the modalities in a more human
            friendly way.
          items:
            $ref: "#/components/schemas/modality"
          type: array
        confidentiality:
          description: The level of general confidentiality of the input.
          example: 0.9
          type: number
        data:
          description: The data extracted.
          type: string
        detections:
          description: The textual detections found while applying policies.
          items:
            $ref: "#/components/schemas/textualdetection"
          type: array
        exploits:
          additionalProperties:
            type: number
          description: |-
            The various exploits attempts.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'Exploits' accross all analyzers.

            Example of exploits detected: jailbreak, prompt_injection, malicious_url.
          example:
            prompt_injection: 0.8
          type: object
        hash:
          description: The hash of the extraction.
          type: string
        intent:
          additionalProperties:
            type: number
          description: |-
            The estimated intent embodied into the text.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'Intent' accross all analyzers.

            Example of intent detected: explain, outline, summarize, write.
          example:
            write: 0.8
          type: object
        internal:
          description: |-
            If true, this extraction is for internal use only. This can be used by agentic
            systems to mark an extraction as internal only as opposed to user facing.
          type: boolean
        isFile:
          description: If true, the data of the extraction is a file.
          type: boolean
        isStored:
          description: If true, indicates that the file has been stored.
          type: boolean
        keywords:
          additionalProperties:
            type: number
          description: The keywords found during classification.
          example:
            my_keyworkd: 0.8
          type: object
        label:
          description: |-
            A means of distinguishing what was extracted, such as prompt, input file or
            code.
          type: string
        languages:
          additionalProperties:
            type: number
          description: |-
            The language of the classification.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'Languages' accross all analyzers.

            Example of languages: chinese, english, french, german, gibberish, japanese,
            russian, spanish.
          example:
            english: 0.8
          type: object
        malcontents:
          additionalProperties:
            type: number
          description: |-
            The various malcontents attempts.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'Malcontents' accross all analyzers.

            Example of malcontents: biased, harmful, toxic.
          example:
            toxic: 0.8
          type: object
        modalities:
          description: The modalities of data detected in the data.
          items:
            $ref: "#/components/schemas/modality"
          type: array
        relevance:
          description: The level of general organization relevance of the input.
          example: 0.9
          type: number
        secrets:
          additionalProperties:
            type: number
          description: |-
            The secrets found during classification.

            The current list can be obtained through the analyzers API by searching for
            detector groups 'Secrets' accross all analyzers.

            Example of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,
            aws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,
            credentials, database_url_with_credentials, databricks, denodeploy, dfuse,
            digitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,
            fleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,
            gocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,
            launchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,
            microsoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,
            paystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,
            private_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,
            rechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,
            shopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,
            slack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,
            stripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,
            voiceflow, web_url_with_credentials, zapierwebhook.
          example:
            credentials: 0.7
          type: object
        topics:
          additionalProperties:
            type: number
          description: |-
            The topic of the classification.

            The current list can be obtained through the analyzers API, with the following
            conditions:
              1. Includes all analyzers EXCEPT those in the 'Modality' group
              2. Includes all analyzer detectors EXCEPT those in these groups:
                - 'Secrets'
                - 'Exploits'
                - 'Intent'
                - 'PIIs'
                - 'Malcontents'

            Example of topics: category/enterprise, category/healthcare, category/medical,
            category/personal, contains/blank_image, contains/certificate_signing_request,
            contains/database_url, contains/handwritten_text, contains/printed_text,
            contains/public_key, contains/ssh_public_key, contains/web_url,
            decoded/base32_data, decoded/base58_data, decoded/base64_data,
            decoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,
            decoded/puny_code_data, decoded/quoted_printable_data,
            decoded/url_encoding_data, department/compliance, department/cybersecurity,
            department/finance, department/human_resources,
            department/information_technology, department/legal, department/logistics,
            department/marketing, department/performance_evaluation,
            department/product_management, department/project_management, department/sales,
            department/strategy, department/support, depict/check, depict/code,
            depict/document, depict/unclassified, depict/whiteboard, domain/commercial,
            domain/development, domain/financial, domain/general, domain/regulatory,
            domain/workforce, extracted/csv_cell_content, extracted/document_text_content,
            extracted/handwritten_text_content, extracted/pdf_text_content,
            extracted/pptx_text_content, extracted/spreadsheet_text_content,
            extracted/typed_text_content, timeframe/current_year, timeframe/future,
            timeframe/last_year, timeframe/next_year, timeframe/past,
            transcribed/audio_text_content.
          example:
            category/enterprise: 0.7
            department/logistics: 0.8
            depict/document: 0.8
            extracted/typed_text_content: 1
            timeframe/current_year: 0.6
          type: object
      type: object
    extractioninformation:
      description: Represents extracted information.
      properties:
        "n":
          description: The number of times it has been seen.
          type: integer
      type: object
    extractionrequest:
      description: Represents the extraction that the user wants to extract.
      properties:
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the extraction.
          type: object
        data:
          contentEncoding: base64
          description: The binary data to request extraction for.
          type: string
        internal:
          description: |-
            If true, this extraction is for internal use only. This can be used by agentic
            systems to mark an extraction as internal only as opposed to user facing.
          type: boolean
        isFile:
          description: If true, the data of the extraction is a file.
          type: boolean
        isStored:
          description: If true, indicates that the file has been stored.
          type: boolean
        label:
          description: |-
            A means of distinguishing what was extracted, such as prompt, input file or
            code.
          type: string
      type: object
    extractionsummary:
      description: Represents the summary of the extractions.
      properties:
        PIIs:
          additionalProperties: true
          description: The PIIs found during classification.
          type: object
        categories:
          additionalProperties: true
          description:
            The categories are remapping of the modalities in a more human
            friendly way.
          type: object
        exploits:
          additionalProperties: true
          description: The various exploits attempts.
          type: object
        intent:
          additionalProperties: true
          description: The estimated intent embodied into the text.
          type: object
        keywords:
          additionalProperties: true
          description: The keywords found during classification.
          type: object
        languages:
          additionalProperties: true
          description: The language of the classification.
          type: object
        malcontents:
          additionalProperties: true
          description: The various malcontents attempts.
          type: object
        modalities:
          additionalProperties: true
          description: The modalities of data detected in the data.
          type: object
        secrets:
          additionalProperties: true
          description: The secrets found during classification.
          type: object
        topics:
          additionalProperties: true
          description: The topic of the classification.
          type: object
      type: object
    latency:
      description: Holds information about latencies introduced by Apex.
      properties:
        accessPolicy:
          description: How much time it took to run the access policy in nanoseconds.
          type: integer
        analysis:
          description: How much time it took to run content analysis in nanoseconds.
          type: integer
        assignPolicy:
          description: How much time it took to run the assign policy in nanoseconds.
          type: integer
        contentPolicy:
          description: How much time it took to run content policy in nanoseconds.
          type: integer
        extraction:
          description:
            How much time it took to run input or output extraction in
            nanoseconds.
          type: integer
      type: object
    modality:
      description: Represents the modality of a some data.
      properties:
        group:
          description: |-
            The group of data.

            The current list can be obtained through the analyzers API by searching for
            detector groups in the 'Modality' analyzer group.

            Example of group: application, archive, audio, code, document, executable, font,
            image, text, unknown, video.
          example: image
          type: string
        type:
          description: |-
            The type of data.

            The current list can be obtained through the analyzers API by searching for
            detector names in the 'Modality' analyzer group.

            Example of type: 3dsm, 3gp, 3mf, ace, ada, ai, apk, applebplist, appleplist, ar,
            arc, arj, asc, asf, asm, asp, au, autohotkey, autoit, avi, avif, awk, ax, batch,
            bazel, bcad, bib, bmp, bpg, brainfuck, brf, bzip, bzip3, c, cab, cat, cdf, chm,
            clojure, cmake, cobol, coff, coffeescript, com, cpl, cpp, crt, crx, cs, csproj,
            css, csv, dart, deb, dex, dey, dicom, diff, django, dll, dm, dmg, dmigd,
            dmscript, doc, dockerfile, docx, dotx, dwg, dxf, dylib, elf, elixir, emf, eml,
            epub, erb, erlang, exe, flac, flv, fortran, fpx, gemfile, gemspec, gif,
            gitattributes, gitmodules, gleam, go, gradle, groovy, gzip, h, h5, handlebars,
            haskell, hcl, heif, hlp, hpp, hta, htaccess, html, hwp, icns, ico, ics,
            ignorefile, ini, internetshortcut, ipynb, iso, jar, java, javabytecode,
            javascript, jinja, jng, jnlp, jp2, jpeg, json, jsonl, jsx, julia, jxl, ko,
            kotlin, latex, lha, license, lisp, lnk, lock, lua, lz, lz4, m3u, m4, macho,
            makefile, markdown, matlab, mht, midi, mkv, mp3, mp4, mpegts, mscompress, msi,
            msix, mui, mum, npy, npz, objectivec, ocaml, ocx, odex, odin, odp, ods, odt,
            ogg, one, onnx, otf, outlook, pascal, pcap, pdb, pdf, pebin, pem, perl, php,
            pickle, png, po, postscript, powershell, ppt, pptx, prolog, proteindb, proto,
            psd, python, pythonbytecode, pytorch, qoi, qt, r, randomascii, rar, rdf, rlib,
            rll, rpm, rst, rtf, ruby, rust, scala, scheme, scr, scss, sevenzip, sgml, shell,
            smali, snap, so, solidity, sql, sqlite, squashfs, srt, stlbinary, stltext, sum,
            svg, swf, swift, symlinktext, sys, tar, tcl, textproto, tga, thumbsdb, tiff,
            toml, torrent, tsv, tsx, ttf, twig, txt, txtascii, txtutf16, txtutf8,
            typescript, vba, vbe, vcxproj, verilog, vhdl, visio, vtt, vue, wad, wasm, wav,
            webm, webp, webtemplate, winregistry, wma, wmf, wmv, woff, woff2, xar, xcf, xls,
            xlsb, xlsx, xml, xpi, xz, yaml, yara, zig, zip, zlibstream, zst.
          example: png
          type: string
      required:
        - group
        - type
      type: object
    policeexternaluser:
      description: |-
        PoliceExternalUser holds the information about the remote user for a
        PoliceRequest.
      properties:
        claims:
          description: List of claims extracted from the user query.
          example:
            - "@org=acuvity.ai"
            - given_name=John
            - family_name=Doe
          items:
            type: string
          type: array
        name:
          description: The name of the external user.
          example: John Doe
          type: string
      required:
        - claims
        - name
      type: object
    policerequest:
      description: This is a scan and police request.
      properties:
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the extraction.
          example:
            key1: value1
            key2: value2
          type: object
        anonymization:
          default: FixedSize
          description:
            How to anonymize the data. If deanonymize is true, then VariablSize
            is required.
          enum:
            - FixedSize
            - VariableSize
        bypassHash:
          description: |-
            In the case of a contentPolicy that asks for a confirmation, this is the
            hash you must send back to bypass the block. This is only useful when a
            content policy has been set or is evaluated remotely.
          example: 6f37d752-bce1-4973-88f6-28b6c100ceb8
          type: string
        extractions:
          description: The extractions to request.
          items:
            $ref: "#/components/schemas/extractionrequest"
          type: array
        messages:
          description: |-
            Messages to process and provide detections for. Use data in extractions for
            processing binary data.
          example:
            - Summarize the main points of this article in bullet points.
            - Generate a list of creative product names for a futuristic tech gadget.
          items:
            type: string
          type: array
        provider:
          description: |-
            The name of the provider to use for policy resolutions. If not set, it will
            default to the principal name (the application itself).
          example: openai
          type: string
        type:
          description: The type of text.
          enum:
            - Input
            - Output
        user:
          $ref: "#/components/schemas/policeexternaluser"
      type: object
    policeresponse:
      description: This is a scan and police response.
      properties:
        ID:
          description: ID is the identifier of the object.
          readOnly: true
          type: string
        alerts:
          description: List of alerts that got raised during the policy resolution.
          items:
            $ref: "#/components/schemas/alertevent"
          type: array
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the log.
          type: object
        client:
          description: The client used to send the request.
          example: curl
          type: string
        clientVersion:
          description: The version of the client used to send the request.
          example: 7.64.1
          type: string
        decision:
          description: Tell what was the decision about the data.
          enum:
            - Deny
            - Allow
            - Ask
            - Bypassed
            - ForbiddenUser
        extractions:
          description: The extractions to log.
          items:
            $ref: "#/components/schemas/extraction"
          type: array
        hash:
          description: The hash of the input.
          type: string
        latency:
          $ref: "#/components/schemas/latency"
        namespace:
          description: The namespace of the object.
          readOnly: true
          type: string
        pipelineName:
          description: The name of the particular pipeline that extracted the text.
          type: string
        principal:
          $ref: "#/components/schemas/principal"
        provider:
          description: the provider to use.
          example: openai
          type: string
        reasons:
          description: The various reasons returned by the policy engine.
          items:
            type: string
          type: array
        summary:
          $ref: "#/components/schemas/extractionsummary"
        time:
          description: Set the time of the message request.
          format: date-time
          type: string
        type:
          description: The type of text.
          enum:
            - Input
            - Output
      required:
        - principal
      type: object
    principal:
      description: Describe the principal.
      properties:
        app:
          $ref: "#/components/schemas/principalapp"
        authType:
          description: The type of authentication.
          enum:
            - Certificate
            - UserToken
            - AppToken
            - Hostname
            - Token
            - TierToken
            - External
        claims:
          description: List of claims extracted from the user query.
          items:
            type: string
          type: array
        team:
          description: The team that was used to authorize the request.
          example: admins
          type: string
        tokenName:
          description: The name of the token, if any.
          example: my-user-token
          type: string
        type:
          description: The type of principal.
          enum:
            - User
            - App
          example:
            - User
        user:
          $ref: "#/components/schemas/principaluser"
      required:
        - type
      type: object
    principalapp:
      description: Describes the principal information of an application.
      properties:
        labels:
          description: The list of labels attached to an application request.
          example:
            - country=us
            - another-label
          items:
            type: string
          type: array
        name:
          description: The name of the application.
          example: MyApp
          type: string
        tier:
          description: The tier of the application request.
          example: frontend
          type: string
      type: object
    principaluser:
      description: Describes the principal information of a user.
      properties:
        name:
          description:
            Identification bit that will be used to identify the origin
            of the request.
          example: user@company.com
          type: string
      type: object
    scanrequest:
      description: This is a scan request.
      properties:
        accessPolicy:
          description: |-
            AccessPolicy allows to pass optional Rego access policy. If not set,
            The action is always Allow,
            If it is set, it will be run, and the final decision will be computed based
            on that policy.
            If the rego code does not start with package main, then the needed
            classic package definition and  acuvity imports will be added
            automatically.
            If the code starts with package main, then everything remains untouched.
          type: string
        analyzers:
          description: |-
            The analyzers parameter allows for customizing which analyzers should be used,
            overriding the default selection. Each analyzer entry can optionally include a
            prefix to modify its behavior:

              - No prefix: Runs only the specified analyzers and any dependencies required
            for deeper analyzis (slower but more acurate).
              - '+' (enable): Activates an analyzer that is disabled by default.
              - '-' (disable): Disables an analyzer that is enabled by default.
              - '@' (direct execution): Runs the analyzer immediately, bypassing the deeper
            analyzis (faster but less acurate).

            An analyzers entry can be specified using:
              - The analyzer name (e.g., 'Toxicity detector')
              - The analyzer ID (e.g., 'en-text-toxicity-detector')
              - The analyzer group (e.g., 'Detectors')
              - A detector name (e.g., 'toxic')
              - A detector label (e.g., 'insult')
              - A detector group (e.g., 'Malcontents')

            If left empty, all default analyzers will be executed.
          example:
            - Malcontents
          items:
            type: string
          type: array
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the extraction.
          example:
            key1: value1
            key2: value2
          type: object
        anonymization:
          default: FixedSize
          description:
            How to anonymize the data. If deanonymize is true, then VariablSize
            is required.
          enum:
            - FixedSize
            - VariableSize
        bypassHash:
          description: |-
            In the case of a contentPolicy that asks for a confirmation, this is the
            hash you must send back to bypass the block. This is only useful when a
            content policy has been set or is evaluated remotely.
          example: 6f37d752-bce1-4973-88f6-28b6c100ceb8
          type: string
        contentPolicy:
          description: |-
            ContentPolicy allows to pass optional Rego content policy. If not set,
            The action is always Allow, and there cannot be any alerts raised etc
            If it is set, it will be run, and the final decision will be computed based
            on that policy.
            If the rego code does not start with package main, then the needed
            classic package definition and  acuvity imports will be added
            automatically.
            If the code starts with package main, then everything remains untouched.
          type: string
        extractions:
          description: The extractions to request.
          items:
            $ref: "#/components/schemas/extractionrequest"
          type: array
        keywords:
          description: The keywords found during classification.
          example:
            - legal
            - technical
            - scientific
          items:
            type: string
          type: array
        messages:
          description: |-
            Messages to process and provide detections for. Use data in extractions for
            processing binary data.
          example:
            - Summarize the main points of this article in bullet points.
            - Generate a list of creative product names for a futuristic tech gadget.
          items:
            type: string
          type: array
        minimalLogging:
          description: If true, the system will not log the contents that were scanned.
          type: boolean
        redactions:
          description: The redactions to perform if they are detected.
          example:
            - person
            - ssn
            - location
          items:
            type: string
          type: array
        type:
          description: The type of text.
          enum:
            - Input
            - Output
      type: object
    scanresponse:
      description: This is a scan response.
      properties:
        ID:
          description: ID is the identifier of the object.
          readOnly: true
          type: string
        alerts:
          description: List of alerts that got raised during the policy resolution.
          items:
            $ref: "#/components/schemas/alertevent"
          type: array
        annotations:
          additionalProperties:
            type: string
          description: Annotations attached to the log.
          type: object
        client:
          description: The client used to send the request.
          example: curl
          type: string
        clientVersion:
          description: The version of the client used to send the request.
          example: 7.64.1
          type: string
        decision:
          description: Tell what was the decision about the data.
          enum:
            - Deny
            - Allow
            - Ask
            - Bypassed
            - ForbiddenUser
        extractions:
          description: The extractions to log.
          items:
            $ref: "#/components/schemas/extraction"
          type: array
        hash:
          description: The hash of the input.
          type: string
        latency:
          $ref: "#/components/schemas/latency"
        namespace:
          description: The namespace of the object.
          readOnly: true
          type: string
        pipelineName:
          description: The name of the particular pipeline that extracted the text.
          type: string
        principal:
          $ref: "#/components/schemas/principal"
        provider:
          description: the provider to use.
          example: openai
          type: string
        reasons:
          description: The various reasons returned by the policy engine.
          items:
            type: string
          type: array
        summary:
          $ref: "#/components/schemas/extractionsummary"
        time:
          description: Set the time of the message request.
          format: date-time
          type: string
        type:
          description: The type of text.
          enum:
            - Input
            - Output
      required:
        - principal
      type: object
    textualdetection:
      description: Represents a textual detection done by policy.
      properties:
        end:
          description: The end position of the detection in the original data.
          type: integer
        key:
          description:
            The key that is used in the name's place, If empty, a sequence
            of X's are used.
          type: string
        name:
          description: The name of the detection.
          type: string
        redacted:
          description: If true this detection has been redacted.
          type: boolean
        redactedEnd:
          description: The end position of the detection in the redacted data.
          type: integer
        redactedStart:
          description: The start position of the detection in the redacted data.
          type: integer
        score:
          description: The confidence score of the detection.
          type: number
        start:
          description: The start position of the detection in the original data.
          type: integer
        type:
          description: The type of detection.
          enum:
            - Keyword
            - PII
            - Secret
      type: object
  securitySchemes:
    cookie:
      description: Authentication using a3s cookie
      in: cookie
      name: x-a3s-token
      type: apiKey
    token:
      bearerFormat: JWT
      description: Bearer Token Authentication
      scheme: bearer
      type: http
info:
  contact:
    email: info@acuvity.ai
    name: Acuvity Team
    url: https://acuvity.ai/
  description: Acuvity Apex provides access to scan and detection APIs
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Apex API
  version: "1.0"
openapi: 3.1.0
paths:
  /_acuvity/analyzers:
    get:
      description: List of all available analyzers.
      operationId: get-all-Analyzers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/analyzer"
                type: array
          description: n/a
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: Unable to determine response decoding.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: The caller is not authenticated.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: Unable to retrieve list of analyzers.
      tags:
        - apex
      x-speakeasy-name-override: listAnalyzers
      x-speakeasy-usage-example:
        description:
          Now you can list all available analyzers that can be used in
          the Scan API.
        position: 3
        title: List all available analyzers
  /_acuvity/police:
    post:
      description: Processes the scan and police request.
      operationId: create-PoliceRequest-as-PoliceResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/policerequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/policeresponse"
          description:
            Successfully processing a scan and police request returns a
            police response.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: The scan and police request could not be decoded.
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: The caller is not authenticated.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            The caller is not authorized or has a team or policy assignment
            issue.
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: Could not find a supported content type in the provided header.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            Sending an invalid scan and police request returns an unprocessable
            entity error. Your models might be outdated.
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: Too many requests. You are being rate limited.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            Processing the scan and police request failed because policies
            could not be assigned or running the analysis failed internally.
      tags:
        - apex
      x-speakeasy-ignore: true
      x-speakeasy-name-override: policeRequest
      x-speakeasy-usage-example:
        description: You can submit a scan and police request using the Scan API.
        position: 2
        title: Process a scan and police request
  /_acuvity/scan:
    post:
      description: Processes the scan request.
      operationId: create-ScanRequest-as-ScanResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/scanrequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scanresponse"
          description: Successfully processing a scan request returns a scan response.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: The scan request could not be decoded.
        "401":
          content:
            text/plain:
              schema:
                type: string
          description: The caller is not authenticated.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            The caller is not authorized or has a team or policy assignment
            issue.
        "415":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description: Could not find a supported content type in the provided header.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            Sending an invalid scan request returns an unprocessable entity
            error. Your models might be outdated.
        "429":
          content:
            text/plain:
              schema:
                type: string
          description: Too many requests. You are being rate limited.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/elementalerror"
          description:
            Processing the scan request failed because policies could not
            be assigned or running the analysis failed internally.
      tags:
        - apex
      x-speakeasy-name-override: scanRequest
      x-speakeasy-usage-example:
        description: You can submit a scan request using the Scan API.
        position: 1
        title: Process a scan request
security:
  - token: []
  - cookie: []
servers:
  - description: |-
      The Apex API server which is specific to every organization.
      The apex_domain and apex_port variables can be determined by a call to
      the well-known Apex info endpoint on the backend.
    url: https://{apex_domain}:{apex_port}
    variables:
      apex_domain:
        default: api.apex.acuvity.ai
        description: |-
          The Apex domain to use which is specific to each customer and environment.
          This can be determined through the well known Apex info response from the Acuvity backend API.
      apex_port:
        default: "443"
        description: |-
          The port to use for the Apex URL. Note that this might need to be set to the no-MTLS port
          value of the well known Apex info response from the Acuvity backend API.
tags:
  - description: This tag is for group 'apex'
    name: apex
  - description: This tag is for group 'core'
    name: core
x-speakeasy-retries:
  backoff:
    exponent: 1.5
    initialInterval: 1000
    maxElapsedTime: 300000
    maxInterval: 60000
  retryConnectionErrors: true
  statusCodes:
    - 408
    - 423
    - 429
    - 502
    - 503
    - 504
  strategy: backoff
x-speakeasy-timeout: 60000
