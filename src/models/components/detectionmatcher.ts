/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The detection confidence level to operate on.
 */
export const Confidence = {
  Unlikely: "Unlikely",
  Low: "Low",
  Medium: "Medium",
  High: "High",
} as const;
/**
 * The detection confidence level to operate on.
 */
export type Confidence = ClosedEnum<typeof Confidence>;

/**
 * Specifies how to compare the detection's confidence value against the matcher's
 *
 * @remarks
 * threshold:
 * - 'Is': All Detections confidence must exactly match the threshold
 * - 'Min': At least one detection confidence must be greater than or equal to the
 * threshold
 * - 'Max': At least one detection confidence must be less than the threshold
 * The default value is 'Min'.
 */
export const Operator = {
  Is: "Is",
  Min: "Min",
  Max: "Max",
} as const;
/**
 * Specifies how to compare the detection's confidence value against the matcher's
 *
 * @remarks
 * threshold:
 * - 'Is': All Detections confidence must exactly match the threshold
 * - 'Min': At least one detection confidence must be greater than or equal to the
 * threshold
 * - 'Max': At least one detection confidence must be less than the threshold
 * The default value is 'Min'.
 */
export type Operator = ClosedEnum<typeof Operator>;

/**
 * Represent a detection matcher.
 *
 * @remarks
 * A Detection Matcher serves as a filtering mechanism for analyzers, determining
 * which detections should trigger an analysis. It allows for flexible pattern
 * matching on detection attributes such as name, label, and group using glob-style
 * wildcards. Additionally, it enables confidence-based filtering by defining
 * thresholds and comparison operators. Detection Matchers provide a structured way
 * to control when and how analyzers engage with incoming detections.
 */
export type Detectionmatcher = {
  /**
   * The detection confidence level to operate on.
   */
  confidence?: Confidence | undefined;
  /**
   * The description of the detection matcher.
   */
  description?: string | undefined;
  /**
   * The group pattern used to match detection group. Supports glob-style wildcards
   *
   * @remarks
   * (e.g. 'Text*' matches 'Text', 'Text_'). Default value is '*' meaning matching
   * any
   * detection group.
   */
  group?: string | undefined;
  /**
   * The label pattern used to match detection label. Supports glob-style wildcards
   *
   * @remarks
   * (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
   * detection label.
   */
  label?: string | undefined;
  /**
   * The name pattern used to match detection name. Supports glob-style wildcards
   *
   * @remarks
   * (e.g. 'txt*' matches 'txt', 'txtuf8'). Default value is '*' meaning matching any
   * detection name.
   */
  name?: string | undefined;
  /**
   * Specifies how to compare the detection's confidence value against the matcher's
   *
   * @remarks
   * threshold:
   * - 'Is': All Detections confidence must exactly match the threshold
   * - 'Min': At least one detection confidence must be greater than or equal to the
   * threshold
   * - 'Max': At least one detection confidence must be less than the threshold
   * The default value is 'Min'.
   */
  operator?: Operator | undefined;
};

/** @internal */
export const Confidence$inboundSchema: z.ZodNativeEnum<typeof Confidence> = z
  .nativeEnum(Confidence);

/** @internal */
export const Confidence$outboundSchema: z.ZodNativeEnum<typeof Confidence> =
  Confidence$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Confidence$ {
  /** @deprecated use `Confidence$inboundSchema` instead. */
  export const inboundSchema = Confidence$inboundSchema;
  /** @deprecated use `Confidence$outboundSchema` instead. */
  export const outboundSchema = Confidence$outboundSchema;
}

/** @internal */
export const Operator$inboundSchema: z.ZodNativeEnum<typeof Operator> = z
  .nativeEnum(Operator);

/** @internal */
export const Operator$outboundSchema: z.ZodNativeEnum<typeof Operator> =
  Operator$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operator$ {
  /** @deprecated use `Operator$inboundSchema` instead. */
  export const inboundSchema = Operator$inboundSchema;
  /** @deprecated use `Operator$outboundSchema` instead. */
  export const outboundSchema = Operator$outboundSchema;
}

/** @internal */
export const Detectionmatcher$inboundSchema: z.ZodType<
  Detectionmatcher,
  z.ZodTypeDef,
  unknown
> = z.object({
  confidence: Confidence$inboundSchema.optional(),
  description: z.string().optional(),
  group: z.string().default("*"),
  label: z.string().default("*"),
  name: z.string().default("*"),
  operator: Operator$inboundSchema.default("Min"),
});

/** @internal */
export type Detectionmatcher$Outbound = {
  confidence?: string | undefined;
  description?: string | undefined;
  group: string;
  label: string;
  name: string;
  operator: string;
};

/** @internal */
export const Detectionmatcher$outboundSchema: z.ZodType<
  Detectionmatcher$Outbound,
  z.ZodTypeDef,
  Detectionmatcher
> = z.object({
  confidence: Confidence$outboundSchema.optional(),
  description: z.string().optional(),
  group: z.string().default("*"),
  label: z.string().default("*"),
  name: z.string().default("*"),
  operator: Operator$outboundSchema.default("Min"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detectionmatcher$ {
  /** @deprecated use `Detectionmatcher$inboundSchema` instead. */
  export const inboundSchema = Detectionmatcher$inboundSchema;
  /** @deprecated use `Detectionmatcher$outboundSchema` instead. */
  export const outboundSchema = Detectionmatcher$outboundSchema;
  /** @deprecated use `Detectionmatcher$Outbound` instead. */
  export type Outbound = Detectionmatcher$Outbound;
}

export function detectionmatcherToJSON(
  detectionmatcher: Detectionmatcher,
): string {
  return JSON.stringify(
    Detectionmatcher$outboundSchema.parse(detectionmatcher),
  );
}

export function detectionmatcherFromJSON(
  jsonString: string,
): SafeParseResult<Detectionmatcher, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Detectionmatcher$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Detectionmatcher' from JSON`,
  );
}
