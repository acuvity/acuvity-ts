/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * PoliceExternalUser holds the information about the remote user for a
 *
 * @remarks
 * PoliceRequest.
 */
export type Policeexternaluser = {
  /**
   * List of claims extracted from the user query.
   */
  claims: Array<string>;
  /**
   * The name of the external user.
   */
  name: string;
};

/** @internal */
export const Policeexternaluser$inboundSchema: z.ZodType<
  Policeexternaluser,
  z.ZodTypeDef,
  unknown
> = z.object({
  claims: z.array(z.string()),
  name: z.string(),
});

/** @internal */
export type Policeexternaluser$Outbound = {
  claims: Array<string>;
  name: string;
};

/** @internal */
export const Policeexternaluser$outboundSchema: z.ZodType<
  Policeexternaluser$Outbound,
  z.ZodTypeDef,
  Policeexternaluser
> = z.object({
  claims: z.array(z.string()),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Policeexternaluser$ {
  /** @deprecated use `Policeexternaluser$inboundSchema` instead. */
  export const inboundSchema = Policeexternaluser$inboundSchema;
  /** @deprecated use `Policeexternaluser$outboundSchema` instead. */
  export const outboundSchema = Policeexternaluser$outboundSchema;
  /** @deprecated use `Policeexternaluser$Outbound` instead. */
  export type Outbound = Policeexternaluser$Outbound;
}

export function policeexternaluserToJSON(
  policeexternaluser: Policeexternaluser,
): string {
  return JSON.stringify(
    Policeexternaluser$outboundSchema.parse(policeexternaluser),
  );
}

export function policeexternaluserFromJSON(
  jsonString: string,
): SafeParseResult<Policeexternaluser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Policeexternaluser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Policeexternaluser' from JSON`,
  );
}
