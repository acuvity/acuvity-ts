/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represent a detector an analyzer can use.
 */
export type Detector = {
  /**
   * The description of the detection.
   */
  description?: string | undefined;
  /**
   * The group the detection belongs to.
   */
  group?: string | undefined;
  /**
   * The label returned by the model.
   */
  label?: string | undefined;
  /**
   * The name of the detection.
   */
  name?: string | undefined;
  /**
   * Tell if the detection is positional.
   */
  positional?: boolean | undefined;
};

/** @internal */
export const Detector$inboundSchema: z.ZodType<
  Detector,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  group: z.string().optional(),
  label: z.string().optional(),
  name: z.string().optional(),
  positional: z.boolean().optional(),
});

/** @internal */
export type Detector$Outbound = {
  description?: string | undefined;
  group?: string | undefined;
  label?: string | undefined;
  name?: string | undefined;
  positional?: boolean | undefined;
};

/** @internal */
export const Detector$outboundSchema: z.ZodType<
  Detector$Outbound,
  z.ZodTypeDef,
  Detector
> = z.object({
  description: z.string().optional(),
  group: z.string().optional(),
  label: z.string().optional(),
  name: z.string().optional(),
  positional: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Detector$ {
  /** @deprecated use `Detector$inboundSchema` instead. */
  export const inboundSchema = Detector$inboundSchema;
  /** @deprecated use `Detector$outboundSchema` instead. */
  export const outboundSchema = Detector$outboundSchema;
  /** @deprecated use `Detector$Outbound` instead. */
  export type Outbound = Detector$Outbound;
}

export function detectorToJSON(detector: Detector): string {
  return JSON.stringify(Detector$outboundSchema.parse(detector));
}

export function detectorFromJSON(
  jsonString: string,
): SafeParseResult<Detector, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Detector$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Detector' from JSON`,
  );
}
