/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Principalapp,
  Principalapp$inboundSchema,
  Principalapp$Outbound,
  Principalapp$outboundSchema,
} from "./principalapp.js";
import {
  Principaluser,
  Principaluser$inboundSchema,
  Principaluser$Outbound,
  Principaluser$outboundSchema,
} from "./principaluser.js";

/**
 * The type of authentication.
 */
export const AuthType = {
  Certificate: "Certificate",
  UserToken: "UserToken",
  AppToken: "AppToken",
  Hostname: "Hostname",
  Token: "Token",
  ComponentToken: "ComponentToken",
  External: "External",
} as const;
/**
 * The type of authentication.
 */
export type AuthType = ClosedEnum<typeof AuthType>;

/**
 * The type of principal.
 */
export const PrincipalType = {
  User: "User",
  App: "App",
} as const;
/**
 * The type of principal.
 */
export type PrincipalType = ClosedEnum<typeof PrincipalType>;

/**
 * Describe the principal.
 */
export type Principal = {
  /**
   * Describes the principal information of an application.
   */
  app?: Principalapp | undefined;
  /**
   * The type of authentication.
   */
  authType?: AuthType | undefined;
  /**
   * List of claims extracted from the user query.
   */
  claims?: Array<string> | undefined;
  /**
   * The team that was used to authorize the request.
   */
  team?: string | undefined;
  /**
   * The name of the token, if any.
   */
  tokenName?: string | undefined;
  /**
   * The type of principal.
   */
  type: PrincipalType;
  /**
   * Describes the principal information of a user.
   */
  user?: Principaluser | undefined;
};

/** @internal */
export const AuthType$inboundSchema: z.ZodNativeEnum<typeof AuthType> = z
  .nativeEnum(AuthType);

/** @internal */
export const AuthType$outboundSchema: z.ZodNativeEnum<typeof AuthType> =
  AuthType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthType$ {
  /** @deprecated use `AuthType$inboundSchema` instead. */
  export const inboundSchema = AuthType$inboundSchema;
  /** @deprecated use `AuthType$outboundSchema` instead. */
  export const outboundSchema = AuthType$outboundSchema;
}

/** @internal */
export const PrincipalType$inboundSchema: z.ZodNativeEnum<
  typeof PrincipalType
> = z.nativeEnum(PrincipalType);

/** @internal */
export const PrincipalType$outboundSchema: z.ZodNativeEnum<
  typeof PrincipalType
> = PrincipalType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrincipalType$ {
  /** @deprecated use `PrincipalType$inboundSchema` instead. */
  export const inboundSchema = PrincipalType$inboundSchema;
  /** @deprecated use `PrincipalType$outboundSchema` instead. */
  export const outboundSchema = PrincipalType$outboundSchema;
}

/** @internal */
export const Principal$inboundSchema: z.ZodType<
  Principal,
  z.ZodTypeDef,
  unknown
> = z.object({
  app: Principalapp$inboundSchema.optional(),
  authType: AuthType$inboundSchema.optional(),
  claims: z.array(z.string()).optional(),
  team: z.string().optional(),
  tokenName: z.string().optional(),
  type: PrincipalType$inboundSchema,
  user: Principaluser$inboundSchema.optional(),
});

/** @internal */
export type Principal$Outbound = {
  app?: Principalapp$Outbound | undefined;
  authType?: string | undefined;
  claims?: Array<string> | undefined;
  team?: string | undefined;
  tokenName?: string | undefined;
  type: string;
  user?: Principaluser$Outbound | undefined;
};

/** @internal */
export const Principal$outboundSchema: z.ZodType<
  Principal$Outbound,
  z.ZodTypeDef,
  Principal
> = z.object({
  app: Principalapp$outboundSchema.optional(),
  authType: AuthType$outboundSchema.optional(),
  claims: z.array(z.string()).optional(),
  team: z.string().optional(),
  tokenName: z.string().optional(),
  type: PrincipalType$outboundSchema,
  user: Principaluser$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Principal$ {
  /** @deprecated use `Principal$inboundSchema` instead. */
  export const inboundSchema = Principal$inboundSchema;
  /** @deprecated use `Principal$outboundSchema` instead. */
  export const outboundSchema = Principal$outboundSchema;
  /** @deprecated use `Principal$Outbound` instead. */
  export type Outbound = Principal$Outbound;
}

export function principalToJSON(principal: Principal): string {
  return JSON.stringify(Principal$outboundSchema.parse(principal));
}

export function principalFromJSON(
  jsonString: string,
): SafeParseResult<Principal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Principal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Principal' from JSON`,
  );
}
