/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the summary of the extractions.
 */
export type Extractionsummary = {
  /**
   * The PIIs found during classification.
   */
  piIs?: { [k: string]: any } | undefined;
  /**
   * The categories are remapping of the modalities in a more human friendly way.
   */
  categories?: { [k: string]: any } | undefined;
  /**
   * The various exploits attempts.
   */
  exploits?: { [k: string]: any } | undefined;
  /**
   * The estimated intent embodied into the text.
   */
  intent?: { [k: string]: any } | undefined;
  /**
   * The keywords found during classification.
   */
  keywords?: { [k: string]: any } | undefined;
  /**
   * The language of the classification.
   */
  languages?: { [k: string]: any } | undefined;
  /**
   * The various malcontents attempts.
   */
  malcontents?: { [k: string]: any } | undefined;
  /**
   * The modalities of data detected in the data.
   */
  modalities?: { [k: string]: any } | undefined;
  /**
   * The secrets found during classification.
   */
  secrets?: { [k: string]: any } | undefined;
  /**
   * The topic of the classification.
   */
  topics?: { [k: string]: any } | undefined;
};

/** @internal */
export const Extractionsummary$inboundSchema: z.ZodType<
  Extractionsummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  PIIs: z.record(z.any()).optional(),
  categories: z.record(z.any()).optional(),
  exploits: z.record(z.any()).optional(),
  intent: z.record(z.any()).optional(),
  keywords: z.record(z.any()).optional(),
  languages: z.record(z.any()).optional(),
  malcontents: z.record(z.any()).optional(),
  modalities: z.record(z.any()).optional(),
  secrets: z.record(z.any()).optional(),
  topics: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "PIIs": "piIs",
  });
});

/** @internal */
export type Extractionsummary$Outbound = {
  PIIs?: { [k: string]: any } | undefined;
  categories?: { [k: string]: any } | undefined;
  exploits?: { [k: string]: any } | undefined;
  intent?: { [k: string]: any } | undefined;
  keywords?: { [k: string]: any } | undefined;
  languages?: { [k: string]: any } | undefined;
  malcontents?: { [k: string]: any } | undefined;
  modalities?: { [k: string]: any } | undefined;
  secrets?: { [k: string]: any } | undefined;
  topics?: { [k: string]: any } | undefined;
};

/** @internal */
export const Extractionsummary$outboundSchema: z.ZodType<
  Extractionsummary$Outbound,
  z.ZodTypeDef,
  Extractionsummary
> = z.object({
  piIs: z.record(z.any()).optional(),
  categories: z.record(z.any()).optional(),
  exploits: z.record(z.any()).optional(),
  intent: z.record(z.any()).optional(),
  keywords: z.record(z.any()).optional(),
  languages: z.record(z.any()).optional(),
  malcontents: z.record(z.any()).optional(),
  modalities: z.record(z.any()).optional(),
  secrets: z.record(z.any()).optional(),
  topics: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    piIs: "PIIs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Extractionsummary$ {
  /** @deprecated use `Extractionsummary$inboundSchema` instead. */
  export const inboundSchema = Extractionsummary$inboundSchema;
  /** @deprecated use `Extractionsummary$outboundSchema` instead. */
  export const outboundSchema = Extractionsummary$outboundSchema;
  /** @deprecated use `Extractionsummary$Outbound` instead. */
  export type Outbound = Extractionsummary$Outbound;
}

export function extractionsummaryToJSON(
  extractionsummary: Extractionsummary,
): string {
  return JSON.stringify(
    Extractionsummary$outboundSchema.parse(extractionsummary),
  );
}

export function extractionsummaryFromJSON(
  jsonString: string,
): SafeParseResult<Extractionsummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Extractionsummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Extractionsummary' from JSON`,
  );
}
