/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Modality,
  Modality$inboundSchema,
  Modality$Outbound,
  Modality$outboundSchema,
} from "./modality.js";
import {
  Textualdetection,
  Textualdetection$inboundSchema,
  Textualdetection$Outbound,
  Textualdetection$outboundSchema,
} from "./textualdetection.js";

/**
 * Represents the extracted information to log.
 */
export type Extraction = {
  /**
   * The PIIs found during classification.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'PIIs' accross all analyzers.
   *
   * Example of PIIs detected: aba_routing_number, address, bank_account,
   * bitcoin_wallet, credit_card, driver_license, email_address, itin_number,
   * location, medical_license, money_amount, passport_number, person, phone_number,
   * ssn.
   */
  piIs?: { [k: string]: number } | undefined;
  /**
   * Annotations attached to the extraction.
   */
  annotations?: { [k: string]: string } | undefined;
  /**
   * The categories are remapping of the modalities in a more human friendly way.
   */
  categories?: Array<Modality> | undefined;
  /**
   * The level of general confidentiality of the input.
   */
  confidentiality?: number | undefined;
  /**
   * The data extracted.
   */
  data?: string | undefined;
  /**
   * The textual detections found while applying policies.
   */
  detections?: Array<Textualdetection> | undefined;
  /**
   * The various exploits attempts.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'Exploits' accross all analyzers.
   *
   * Example of exploits detected: jailbreak, prompt_injection, malicious_url.
   */
  exploits?: { [k: string]: number } | undefined;
  /**
   * The hash of the extraction.
   */
  hash?: string | undefined;
  /**
   * The estimated intent embodied into the text.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'Intent' accross all analyzers.
   *
   * Example of intent detected: explain, outline, summarize, write.
   */
  intent?: { [k: string]: number } | undefined;
  /**
   * If true, this extraction is for internal use only. This can be used by agentic
   *
   * @remarks
   * systems to mark an extraction as internal only as opposed to user facing.
   */
  internal?: boolean | undefined;
  /**
   * If true, the data of the extraction is a file.
   */
  isFile?: boolean | undefined;
  /**
   * If true, indicates that the file has been stored.
   */
  isStored?: boolean | undefined;
  /**
   * The keywords found during classification.
   */
  keywords?: { [k: string]: number } | undefined;
  /**
   * A means of distinguishing what was extracted, such as prompt, input file or
   *
   * @remarks
   * code.
   */
  label?: string | undefined;
  /**
   * The language of the classification.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'Languages' accross all analyzers.
   *
   * Example of languages: chinese, english, french, german, gibberish, japanese,
   * russian, spanish.
   */
  languages?: { [k: string]: number } | undefined;
  /**
   * The various malcontents attempts.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'Malcontents' accross all analyzers.
   *
   * Example of malcontents: biased, harmful, toxic.
   */
  malcontents?: { [k: string]: number } | undefined;
  /**
   * The modalities of data detected in the data.
   */
  modalities?: Array<Modality> | undefined;
  /**
   * The level of general organization relevance of the input.
   */
  relevance?: number | undefined;
  /**
   * The secrets found during classification.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API by searching for
   * detector groups 'Secrets' accross all analyzers.
   *
   * Example of secrets: adafruit, alibaba, anthropic, apideck, apify, atlassian,
   * aws_secret_key, buildkite, checkout, clickuppersonal, contentfulpersonalaccess,
   * credentials, database_url_with_credentials, databricks, denodeploy, dfuse,
   * digitalocean, discord_webhook, docker_hub, doppler, dropbox, endorlabs,
   * fleetbase, flutterwave, frameio, freshdesk, fullstory, github, gitlab,
   * gocardless, google_api, grafana, groq, huggingface, intra42, jwt, klaviyo,
   * launchdarkly, linearapi, locationiq, mailchimp, mailgun, mapbox, maxmind,
   * microsoft_teams_webhook, nightfall, notion, npm, openai, otp_auth_url, pagarme,
   * paystack, planetscale, planetscaledb, portainer, posthog, postman, prefect,
   * private_key, pubnub_publish, pubnub_subscribe, pulumi, ramp, razorpay, readme,
   * rechargepayments, replicate, rubygems, salesforce, sendgrid, sendinblue,
   * shopify, slack_access, slack_bot, slack_refresh, slack_user, slack_webhook,
   * slack_workflow_webhook, sourcegraph, sourcegraphcody, squareapp, squareup,
   * stripe, supabase, tailscale, tines_webhook, trufflehog, twilio, ubidots,
   * voiceflow, web_url_with_credentials, zapierwebhook.
   */
  secrets?: { [k: string]: number } | undefined;
  /**
   * The topic of the classification.
   *
   * @remarks
   *
   * The current list can be obtained through the analyzers API, with the following
   * conditions:
   *   1. Includes all analyzers EXCEPT those in the 'Modality' group
   *   2. Includes all analyzer detectors EXCEPT those in these groups:
   *     - 'Secrets'
   *     - 'Exploits'
   *     - 'Intent'
   *     - 'PIIs'
   *     - 'Malcontents'
   *
   * Example of topics: category/enterprise, category/healthcare, category/medical,
   * category/personal, contains/blank_image, contains/certificate_signing_request,
   * contains/database_url, contains/handwritten_text, contains/printed_text,
   * contains/public_key, contains/ssh_public_key, contains/web_url,
   * decoded/base32_data, decoded/base58_data, decoded/base64_data,
   * decoded/base64_url_data, decoded/base85_data, decoded/hexadecimal_data,
   * decoded/puny_code_data, decoded/quoted_printable_data,
   * decoded/url_encoding_data, department/compliance, department/cybersecurity,
   * department/finance, department/human_resources,
   * department/information_technology, department/legal, department/logistics,
   * department/marketing, department/performance_evaluation,
   * department/product_management, department/project_management, department/sales,
   * department/strategy, department/support, depict/check, depict/code,
   * depict/document, depict/unclassified, depict/whiteboard, domain/commercial,
   * domain/development, domain/financial, domain/general, domain/regulatory,
   * domain/workforce, extracted/csv_cell_content, extracted/document_text_content,
   * extracted/handwritten_text_content, extracted/pdf_text_content,
   * extracted/pptx_text_content, extracted/spreadsheet_text_content,
   * extracted/typed_text_content, timeframe/current_year, timeframe/future,
   * timeframe/last_year, timeframe/next_year, timeframe/past,
   * transcribed/audio_text_content.
   */
  topics?: { [k: string]: number } | undefined;
};

/** @internal */
export const Extraction$inboundSchema: z.ZodType<
  Extraction,
  z.ZodTypeDef,
  unknown
> = z.object({
  PIIs: z.record(z.number()).optional(),
  annotations: z.record(z.string()).optional(),
  categories: z.array(Modality$inboundSchema).optional(),
  confidentiality: z.number().optional(),
  data: z.string().optional(),
  detections: z.array(Textualdetection$inboundSchema).optional(),
  exploits: z.record(z.number()).optional(),
  hash: z.string().optional(),
  intent: z.record(z.number()).optional(),
  internal: z.boolean().optional(),
  isFile: z.boolean().optional(),
  isStored: z.boolean().optional(),
  keywords: z.record(z.number()).optional(),
  label: z.string().optional(),
  languages: z.record(z.number()).optional(),
  malcontents: z.record(z.number()).optional(),
  modalities: z.array(Modality$inboundSchema).optional(),
  relevance: z.number().optional(),
  secrets: z.record(z.number()).optional(),
  topics: z.record(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "PIIs": "piIs",
  });
});

/** @internal */
export type Extraction$Outbound = {
  PIIs?: { [k: string]: number } | undefined;
  annotations?: { [k: string]: string } | undefined;
  categories?: Array<Modality$Outbound> | undefined;
  confidentiality?: number | undefined;
  data?: string | undefined;
  detections?: Array<Textualdetection$Outbound> | undefined;
  exploits?: { [k: string]: number } | undefined;
  hash?: string | undefined;
  intent?: { [k: string]: number } | undefined;
  internal?: boolean | undefined;
  isFile?: boolean | undefined;
  isStored?: boolean | undefined;
  keywords?: { [k: string]: number } | undefined;
  label?: string | undefined;
  languages?: { [k: string]: number } | undefined;
  malcontents?: { [k: string]: number } | undefined;
  modalities?: Array<Modality$Outbound> | undefined;
  relevance?: number | undefined;
  secrets?: { [k: string]: number } | undefined;
  topics?: { [k: string]: number } | undefined;
};

/** @internal */
export const Extraction$outboundSchema: z.ZodType<
  Extraction$Outbound,
  z.ZodTypeDef,
  Extraction
> = z.object({
  piIs: z.record(z.number()).optional(),
  annotations: z.record(z.string()).optional(),
  categories: z.array(Modality$outboundSchema).optional(),
  confidentiality: z.number().optional(),
  data: z.string().optional(),
  detections: z.array(Textualdetection$outboundSchema).optional(),
  exploits: z.record(z.number()).optional(),
  hash: z.string().optional(),
  intent: z.record(z.number()).optional(),
  internal: z.boolean().optional(),
  isFile: z.boolean().optional(),
  isStored: z.boolean().optional(),
  keywords: z.record(z.number()).optional(),
  label: z.string().optional(),
  languages: z.record(z.number()).optional(),
  malcontents: z.record(z.number()).optional(),
  modalities: z.array(Modality$outboundSchema).optional(),
  relevance: z.number().optional(),
  secrets: z.record(z.number()).optional(),
  topics: z.record(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    piIs: "PIIs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Extraction$ {
  /** @deprecated use `Extraction$inboundSchema` instead. */
  export const inboundSchema = Extraction$inboundSchema;
  /** @deprecated use `Extraction$outboundSchema` instead. */
  export const outboundSchema = Extraction$outboundSchema;
  /** @deprecated use `Extraction$Outbound` instead. */
  export type Outbound = Extraction$Outbound;
}

export function extractionToJSON(extraction: Extraction): string {
  return JSON.stringify(Extraction$outboundSchema.parse(extraction));
}

export function extractionFromJSON(
  jsonString: string,
): SafeParseResult<Extraction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Extraction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Extraction' from JSON`,
  );
}
