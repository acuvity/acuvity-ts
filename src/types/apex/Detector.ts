// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The description of the detection.
 */
export type Description = string | null;
/**
 * The group the detection belongs to.
 */
export type Group = string | null;
/**
 * The label returned by the model.
 */
export type Label = string | null;
/**
 * The name of the detection.
 */
export type Name = string | null;
/**
 * Tell if the detection is positional.
 */
export type Positional = boolean | null;

/**
 * Represent a detector an analyzer can use.
 */
export interface Detector {
  description?: Description;
  group?: Group;
  label?: Label;
  name?: Name;
  positional?: Positional;
}


// createValidateIdentity<Detector> creates a validator for the the elemental identity Detector
export const validateDetector = createValidateIdentity<Detector>('detector');

export const DetectorProperties: Record<keyof Detector, PropertyDetails> = {
  "description": {
    "description": "The description of the detection.",
    "title": "Description",
    "type": [
      "string",
      "null"
    ]
  },
  "group": {
    "description": "The group the detection belongs to.",
    "title": "Group",
    "type": [
      "string",
      "null"
    ]
  },
  "label": {
    "description": "The label returned by the model.",
    "title": "Label",
    "type": [
      "string",
      "null"
    ]
  },
  "name": {
    "description": "The name of the detection.",
    "title": "Name",
    "type": [
      "string",
      "null"
    ]
  },
  "positional": {
    "description": "Tell if the detection is positional.",
    "title": "Positional",
    "type": [
      "boolean",
      "null"
    ]
  },
}

// DetectorIdentity
export const DetectorIdentity = {
  isIdentity: true,
  description: `Represent a detector an analyzer can use.`,
  title: `Detector`,
  friendlyName: `Detector`,
  friendlyNamePlural: `Detectors`,
  name: 'Detector',
  restName: 'detector',
  resourceName: 'detectors',
  package: 'lain',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('detector'),
  properties: DetectorProperties,
} as const;
