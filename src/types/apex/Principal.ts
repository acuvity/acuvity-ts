// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The list of labels attached to an application request.
 */
export type Labels = (string | null)[];
/**
 * The name of the application.
 */
export type Name = string | null;
/**
 * The tier of the application request.
 */
export type Tier = string | null;
/**
 * The type of authentication.
 */
export type AuthType = "Certificate" | "UserToken" | "AppToken" | "Hostname" | "Token" | "TierToken" | "External";
/**
 * List of claims extracted from the user query.
 */
export type Claims = (string | null)[];
/**
 * The team that was used to authorize the request.
 */
export type Team = string | null;
/**
 * The name of the token, if any.
 */
export type TokenName = string | null;
/**
 * The type of principal.
 */
export type Type = "User" | "App";
/**
 * Identification bit that will be used to identify the origin of the request.
 */
export type Name1 = string | null;

/**
 * Describe the principal.
 */
export interface Principal {
  app?: App;
  authType?: AuthType;
  claims?: Claims;
  team?: Team;
  tokenName?: TokenName;
  type: Type;
  user?: User;
}
/**
 * The application principal information if type is App.
 */
export interface App {
  labels?: Labels;
  name?: Name;
  tier?: Tier;
  [k: string]: unknown;
}
/**
 * The user principal information if type is User.
 */
export interface User {
  name?: Name1;
  [k: string]: unknown;
}


// createValidateIdentity<Principal> creates a validator for the the elemental identity Principal
export const validatePrincipal = createValidateIdentity<Principal>('principal');

export const PrincipalProperties: Record<keyof Principal, PropertyDetails> = {
  "app": {
    "description": "The application principal information if type is App.",
    "title": "App"
  },
  "authType": {
    "description": "The type of authentication.",
    "title": "Auth Type"
  },
  "claims": {
    "description": "List of claims extracted from the user query.",
    "title": "Claims",
    "type": "array"
  },
  "team": {
    "description": "The team that was used to authorize the request.",
    "title": "Team",
    "type": [
      "string",
      "null"
    ]
  },
  "tokenName": {
    "description": "The name of the token, if any.",
    "title": "Token Name",
    "type": [
      "string",
      "null"
    ]
  },
  "type": {
    "required": true,
    "description": "The type of principal.",
    "title": "Type"
  },
  "user": {
    "description": "The user principal information if type is User.",
    "title": "User"
  },
}

// PrincipalIdentity
export const PrincipalIdentity = {
  isIdentity: true,
  description: `Describe the principal.`,
  title: `Principal`,
  friendlyName: `Principal`,
  friendlyNamePlural: `Principals`,
  name: 'Principal',
  restName: 'principal',
  resourceName: 'principals',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('principal'),
  properties: PrincipalProperties,
} as const;
