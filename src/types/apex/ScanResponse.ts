// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * ID is the identifier of the object.
 */
export type ID = string | null;
/**
 * The name of the alert definition that triggered the alert event.
 */
export type AlertDefinition = string;
/**
 * The namespace of the alert definition.
 */
export type AlertDefinitionNamespace = string | null;
/**
 * The list of labels attached to an application request.
 */
export type Labels = (string | null)[];
/**
 * The name of the application.
 */
export type Name = string | null;
/**
 * The tier of the application request.
 */
export type Tier = string | null;
/**
 * The type of authentication.
 */
export type AuthType = "Certificate" | "UserToken" | "AppToken" | "Hostname" | "Token" | "TierToken" | "External";
/**
 * List of claims extracted from the user query.
 */
export type Claims = (string | null)[];
/**
 * The team that was used to authorize the request.
 */
export type Team = string | null;
/**
 * The name of the token, if any.
 */
export type TokenName = string | null;
/**
 * The type of principal.
 */
export type Type = "User" | "App";
/**
 * Identification bit that will be used to identify the origin of the request.
 */
export type Name1 = string | null;
/**
 * The provider used that the alert came from.
 */
export type Provider = string | null;
/**
 * When the alert event was raised.
 */
export type Timestamp = string | null;
/**
 * List of alerts that got raised during the policy resolution.
 */
export type Alerts = AlertEvent[];
/**
 * Tell what was the decision about the data.
 */
export type Decision = "Deny" | "Allow" | "Ask" | "Bypassed" | "ForbiddenUser";
/**
 * The group of data.
 */
export type Group = string;
/**
 * The type of data.
 */
export type Type1 = string;
/**
 * The categories are remapping of the modalities in a more human friendly way.
 */
export type Categories = Modality[];
/**
 * The level of general confidentiality of the input.
 */
export type Confidentiality = number | null;
/**
 * The data extracted.
 */
export type Data = string | null;
/**
 * The end position of the detection.
 */
export type End = number | null;
/**
 * The key that is used in the name's place, If empty, a sequence of X's are used.
 */
export type Key = string | null;
/**
 * The name of the detection.
 */
export type Name2 = string | null;
/**
 * The confidence score of the detection.
 */
export type Score = number | null;
/**
 * The start position of the detection.
 */
export type Start = number | null;
/**
 * The type of detection.
 */
export type Type2 = "Keyword" | "PII" | "Secret";
/**
 * The detections found while applying policies.
 */
export type Detections = TextualDetection[];
/**
 * The hash of the extraction.
 */
export type Hash = string | null;
/**
 * If true, this extraction is for internal use only. This can be used by agentic systems to mark an extraction as internal only as opposed to user facing.
 */
export type Internal = boolean | null;
/**
 * A means of distinguishing what was extracted, such as prompt, input file or code.
 */
export type Label = string | null;
/**
 * The modalities of data detected in the data.
 */
export type Modalities = Modality[];
/**
 * The redactions that has been performed.
 */
export type Redactions = TextualDetection[];
/**
 * The level of general organization relevance of the input.
 */
export type Relevance = number | null;
/**
 * The extractions to log.
 */
export type Extractions = Extraction[];
/**
 * The hash of the input.
 */
export type Hash1 = string | null;
/**
 * How much time it took to run the access policy in nanoseconds.
 */
export type AccessPolicy = number | null;
/**
 * How much time it took to run content analysis in nanoseconds.
 */
export type Analysis = number | null;
/**
 * How much time it took to run the assign policy in nanoseconds.
 */
export type AssignPolicy = number | null;
/**
 * How much time it took to run content policy in nanoseconds.
 */
export type ContentPolicy = number | null;
/**
 * How much time it took to run input or output extraction in nanoseconds.
 */
export type Extraction1 = number | null;
/**
 * The namespace of the object.
 */
export type Namespace = string | null;
/**
 * The name of the particular pipeline that extracted the text.
 */
export type PipelineName = string | null;
/**
 * the provider to use.
 */
export type Provider1 = string | null;
/**
 * The various reasons returned by the policy engine.
 */
export type Reasons = (string | null)[];
/**
 * Set the time of the message request.
 */
export type Time = string | null;
/**
 * The type of text.
 */
export type Type3 = "Input" | "Output";

/**
 * This is a scan response.
 */
export interface ScanResponse {
  ID?: ID;
  alerts?: Alerts;
  annotations?: Annotations;
  decision?: Decision;
  extractions?: Extractions;
  hash?: Hash1;
  latency?: Latency;
  namespace?: Namespace;
  pipelineName?: PipelineName;
  principal: Principal1;
  provider?: Provider1;
  reasons?: Reasons;
  time?: Time;
  type?: Type3;
}
/**
 * Represents an alert event raised by a policy.
 */
export interface AlertEvent {
  alertDefinition: AlertDefinition;
  alertDefinitionNamespace?: AlertDefinitionNamespace;
  principal: Principal;
  provider?: Provider;
  timestamp?: Timestamp;
  [k: string]: unknown;
}
/**
 * The principal of the object.
 */
export interface Principal {
  app?: App;
  authType?: AuthType;
  claims?: Claims;
  team?: Team;
  tokenName?: TokenName;
  type: Type;
  user?: User;
  [k: string]: unknown;
}
/**
 * The application principal information if type is App.
 */
export interface App {
  labels?: Labels;
  name?: Name;
  tier?: Tier;
  [k: string]: unknown;
}
/**
 * The user principal information if type is User.
 */
export interface User {
  name?: Name1;
  [k: string]: unknown;
}
/**
 * Annotations attached to the log.
 */
export interface Annotations {
  [k: string]: unknown;
}
/**
 * Represents the extracted information to log.
 */
export interface Extraction {
  PIIs?: PIIs;
  annotations?: Annotations1;
  categories?: Categories;
  confidentiality?: Confidentiality;
  data?: Data;
  detections?: Detections;
  exploits?: Exploits;
  hash?: Hash;
  intent?: Intent;
  internal?: Internal;
  keywords?: Keywords;
  label?: Label;
  languages?: Languages;
  modalities?: Modalities;
  redactions?: Redactions;
  relevance?: Relevance;
  secrets?: Secrets;
  topics?: Topics;
  [k: string]: unknown;
}
/**
 * The PIIs found during classification.
 */
export interface PIIs {
  [k: string]: unknown;
}
/**
 * Annotations attached to the extraction.
 */
export interface Annotations1 {
  [k: string]: unknown;
}
/**
 * Represents the modality of a some data.
 */
export interface Modality {
  group: Group;
  type: Type1;
  [k: string]: unknown;
}
/**
 * Represents a textual detection done by policy.
 */
export interface TextualDetection {
  end?: End;
  key?: Key;
  name?: Name2;
  score?: Score;
  start?: Start;
  type?: Type2;
  [k: string]: unknown;
}
/**
 * The various exploits attempts.
 */
export interface Exploits {
  [k: string]: unknown;
}
/**
 * The estimated intent embodied into the text.
 */
export interface Intent {
  [k: string]: unknown;
}
/**
 * The keywords found during classification.
 */
export interface Keywords {
  [k: string]: unknown;
}
/**
 * The language of the classification.
 */
export interface Languages {
  [k: string]: unknown;
}
/**
 * The secrets found during classification.
 */
export interface Secrets {
  [k: string]: unknown;
}
/**
 * The topic of the classification.
 */
export interface Topics {
  [k: string]: unknown;
}
/**
 * Information about latency of various stage of request and response.
 */
export interface Latency {
  accessPolicy?: AccessPolicy;
  analysis?: Analysis;
  assignPolicy?: AssignPolicy;
  contentPolicy?: ContentPolicy;
  extraction?: Extraction1;
  [k: string]: unknown;
}
/**
 * The principal of the object.
 */
export interface Principal1 {
  app?: App;
  authType?: AuthType;
  claims?: Claims;
  team?: Team;
  tokenName?: TokenName;
  type: Type;
  user?: User;
  [k: string]: unknown;
}


// createValidateIdentity<ScanResponse> creates a validator for the the elemental identity ScanResponse
export const validateScanResponse = createValidateIdentity<ScanResponse>('scanresponse');

export const ScanResponseProperties: Record<keyof ScanResponse, PropertyDetails> = {
  "ID": {
    "readOnly": true,
    "description": "ID is the identifier of the object.",
    "title": "ID",
    "type": [
      "string",
      "null"
    ]
  },
  "alerts": {
    "description": "List of alerts that got raised during the policy resolution.",
    "title": "Alerts",
    "type": "array"
  },
  "annotations": {
    "description": "Annotations attached to the log.",
    "title": "Annotations",
    "type": "object"
  },
  "decision": {
    "description": "Tell what was the decision about the data.",
    "title": "Decision"
  },
  "extractions": {
    "description": "The extractions to log.",
    "title": "Extractions",
    "type": "array"
  },
  "hash": {
    "description": "The hash of the input.",
    "title": "Hash",
    "type": [
      "string",
      "null"
    ]
  },
  "latency": {
    "description": "Information about latency of various stage of request and response.",
    "title": "Latency"
  },
  "namespace": {
    "readOnly": true,
    "description": "The namespace of the object.",
    "title": "Namespace",
    "type": [
      "string",
      "null"
    ]
  },
  "pipelineName": {
    "description": "The name of the particular pipeline that extracted the text.",
    "title": "Pipeline Name",
    "type": [
      "string",
      "null"
    ]
  },
  "principal": {
    "required": true,
    "description": "The principal of the object.",
    "title": "Principal"
  },
  "provider": {
    "description": "the provider to use.",
    "title": "Provider",
    "type": [
      "string",
      "null"
    ]
  },
  "reasons": {
    "description": "The various reasons returned by the policy engine.",
    "title": "Reasons",
    "type": "array"
  },
  "time": {
    "description": "Set the time of the message request.",
    "title": "Time",
    "type": [
      "string",
      "null"
    ]
  },
  "type": {
    "description": "The type of text.",
    "title": "Type"
  },
}

// ScanResponseIdentity
export const ScanResponseIdentity = {
  isIdentity: true,
  description: `This is a scan response.`,
  title: `ScanResponse`,
  friendlyName: `ScanResponse`,
  friendlyNamePlural: `ScanResponses`,
  name: 'ScanResponse',
  restName: 'scanresponse',
  resourceName: 'scanresponses',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('scanresponse'),
  properties: ScanResponseProperties,
} as const;
