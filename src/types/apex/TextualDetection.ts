// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The end position of the detection.
 */
export type End = number | null;
/**
 * The key that is used in the name's place, If empty, a sequence of X's are used.
 */
export type Key = string | null;
/**
 * The name of the detection.
 */
export type Name = string | null;
/**
 * The confidence score of the detection.
 */
export type Score = number | null;
/**
 * The start position of the detection.
 */
export type Start = number | null;
/**
 * The type of detection.
 */
export type Type = "Keyword" | "PII" | "Secret";

/**
 * Represents a textual detection done by policy.
 */
export interface TextualDetection {
  end?: End;
  key?: Key;
  name?: Name;
  score?: Score;
  start?: Start;
  type?: Type;
}


// createValidateIdentity<TextualDetection> creates a validator for the the elemental identity TextualDetection
export const validateTextualDetection = createValidateIdentity<TextualDetection>('textualdetection');

export const TextualDetectionProperties: Record<keyof TextualDetection, PropertyDetails> = {
  "end": {
    "description": "The end position of the detection.",
    "title": "End",
    "type": [
      "integer",
      "null"
    ]
  },
  "key": {
    "description": "The key that is used in the name's place, If empty, a sequence of X's are used.",
    "title": "Key",
    "type": [
      "string",
      "null"
    ]
  },
  "name": {
    "description": "The name of the detection.",
    "title": "Name",
    "type": [
      "string",
      "null"
    ]
  },
  "score": {
    "description": "The confidence score of the detection.",
    "title": "Score",
    "type": [
      "number",
      "null"
    ]
  },
  "start": {
    "description": "The start position of the detection.",
    "title": "Start",
    "type": [
      "integer",
      "null"
    ]
  },
  "type": {
    "description": "The type of detection.",
    "title": "Type"
  },
}

// TextualDetectionIdentity
export const TextualDetectionIdentity = {
  isIdentity: true,
  description: `Represents a textual detection done by policy.`,
  title: `TextualDetection`,
  friendlyName: `Textual Detection`,
  friendlyNamePlural: `Textual Detections`,
  name: 'TextualDetection',
  restName: 'textualdetection',
  resourceName: 'textualdetections',
  package: 'lain',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('textualdetection'),
  properties: TextualDetectionProperties,
} as const;
