// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The binary data to request extraction for.
 */
export type Data = string;
/**
 * If true, this extraction is for internal use only. This can be used by agentic systems to mark an extraction as internal only as opposed to user facing.
 */
export type Internal = boolean | null;
/**
 * A means of distinguishing what was extracted, such as prompt, input file or code.
 */
export type Label = string | null;

/**
 * Represents the extraction that the user wants to extract.
 */
export interface ExtractionRequest {
  annotations?: Annotations;
  data?: Data;
  internal?: Internal;
  label?: Label;
}
/**
 * Annotations attached to the extraction.
 */
export interface Annotations {
  [k: string]: unknown;
}


// createValidateIdentity<ExtractionRequest> creates a validator for the the elemental identity ExtractionRequest
export const validateExtractionRequest = createValidateIdentity<ExtractionRequest>('extractionrequest');

export const ExtractionRequestProperties: Record<keyof ExtractionRequest, PropertyDetails> = {
  "annotations": {
    "description": "Annotations attached to the extraction.",
    "title": "Annotations",
    "type": "object"
  },
  "data": {
    "description": "The binary data to request extraction for.",
    "title": "Data",
    "type": "string"
  },
  "internal": {
    "description": "If true, this extraction is for internal use only. This can be used by agentic systems to mark an extraction as internal only as opposed to user facing.",
    "title": "Internal",
    "type": [
      "boolean",
      "null"
    ]
  },
  "label": {
    "description": "A means of distinguishing what was extracted, such as prompt, input file or code.",
    "title": "Label",
    "type": [
      "string",
      "null"
    ]
  },
}

// ExtractionRequestIdentity
export const ExtractionRequestIdentity = {
  isIdentity: true,
  description: `Represents the extraction that the user wants to extract.`,
  title: `ExtractionRequest`,
  friendlyName: `ExtractionRequest`,
  friendlyNamePlural: `ExtractionRequests`,
  name: 'ExtractionRequest',
  restName: 'extractionrequest',
  resourceName: 'extractionrequests',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('extractionrequest'),
  properties: ExtractionRequestProperties,
} as const;
