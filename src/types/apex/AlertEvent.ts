// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The name of the alert definition that triggered the alert event.
 */
export type AlertDefinition = string;
/**
 * The namespace of the alert definition.
 */
export type AlertDefinitionNamespace = string | null;
/**
 * The list of labels attached to an application request.
 */
export type Labels = (string | null)[];
/**
 * The name of the application.
 */
export type Name = string | null;
/**
 * The tier of the application request.
 */
export type Tier = string | null;
/**
 * The type of authentication.
 */
export type AuthType = "Certificate" | "UserToken" | "AppToken" | "Hostname" | "Token" | "TierToken" | "External";
/**
 * List of claims extracted from the user query.
 */
export type Claims = (string | null)[];
/**
 * The team that was used to authorize the request.
 */
export type Team = string | null;
/**
 * The name of the token, if any.
 */
export type TokenName = string | null;
/**
 * The type of principal.
 */
export type Type = "User" | "App";
/**
 * Identification bit that will be used to identify the origin of the request.
 */
export type Name1 = string | null;
/**
 * The provider used that the alert came from.
 */
export type Provider = string | null;
/**
 * When the alert event was raised.
 */
export type Timestamp = string | null;

/**
 * Represents an alert event raised by a policy.
 */
export interface AlertEvent {
  alertDefinition: AlertDefinition;
  alertDefinitionNamespace?: AlertDefinitionNamespace;
  principal: Principal;
  provider?: Provider;
  timestamp?: Timestamp;
}
/**
 * The principal of the object.
 */
export interface Principal {
  app?: App;
  authType?: AuthType;
  claims?: Claims;
  team?: Team;
  tokenName?: TokenName;
  type: Type;
  user?: User;
  [k: string]: unknown;
}
/**
 * The application principal information if type is App.
 */
export interface App {
  labels?: Labels;
  name?: Name;
  tier?: Tier;
  [k: string]: unknown;
}
/**
 * The user principal information if type is User.
 */
export interface User {
  name?: Name1;
  [k: string]: unknown;
}


// createValidateIdentity<AlertEvent> creates a validator for the the elemental identity AlertEvent
export const validateAlertEvent = createValidateIdentity<AlertEvent>('alertevent');

export const AlertEventProperties: Record<keyof AlertEvent, PropertyDetails> = {
  "alertDefinition": {
    "required": true,
    "description": "The name of the alert definition that triggered the alert event.",
    "title": "Alert Definition",
    "type": "string"
  },
  "alertDefinitionNamespace": {
    "description": "The namespace of the alert definition.",
    "title": "Alert Definition Namespace",
    "type": [
      "string",
      "null"
    ]
  },
  "principal": {
    "required": true,
    "description": "The principal of the object.",
    "title": "Principal"
  },
  "provider": {
    "description": "The provider used that the alert came from.",
    "title": "Provider",
    "type": [
      "string",
      "null"
    ]
  },
  "timestamp": {
    "readOnly": true,
    "description": "When the alert event was raised.",
    "title": "Timestamp",
    "type": [
      "string",
      "null"
    ]
  },
}

// AlertEventIdentity
export const AlertEventIdentity = {
  isIdentity: true,
  description: `Represents an alert event raised by a policy.`,
  title: `AlertEvent`,
  friendlyName: `Alert Event`,
  friendlyNamePlural: `Alert Events`,
  name: 'AlertEvent',
  restName: 'alertevent',
  resourceName: 'alertevents',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('alertevent'),
  properties: AlertEventProperties,
} as const;
