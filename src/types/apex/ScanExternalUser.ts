// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * List of claims extracted from the user query.
 */
export type Claims = string[];
/**
 * The name of the external user.
 */
export type Name = string;

/**
 * ScanExternalUser holds the information about the remote user for a ScanRequest.
 */
export interface ScanExternalUser {
  claims: Claims;
  name: Name;
}


// createValidateIdentity<ScanExternalUser> creates a validator for the the elemental identity ScanExternalUser
export const validateScanExternalUser = createValidateIdentity<ScanExternalUser>('scanexternaluser');

export const ScanExternalUserProperties: Record<keyof ScanExternalUser, PropertyDetails> = {
  "claims": {
    "required": true,
    "description": "List of claims extracted from the user query.",
    "title": "Claims",
    "type": "array"
  },
  "name": {
    "required": true,
    "description": "The name of the external user.",
    "title": "Name",
    "type": "string"
  },
}

// ScanExternalUserIdentity
export const ScanExternalUserIdentity = {
  isIdentity: true,
  description: `ScanExternalUser holds the information about the remote user for a ScanRequest.`,
  title: `ScanExternalUser`,
  friendlyName: `ScanExternalUser`,
  friendlyNamePlural: `ScanExternalUsers`,
  name: 'ScanExternalUser',
  restName: 'scanexternaluser',
  resourceName: 'scanexternalusers',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('scanexternaluser'),
  properties: ScanExternalUserProperties,
} as const;
