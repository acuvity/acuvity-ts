// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * ID is the identifier of the object.
 */
export type ID = string | null;
/**
 * The description of the analyzer.
 */
export type Description = string | null;
/**
 * The description of the detection.
 */
export type Description1 = string | null;
/**
 * The group the detection belongs to.
 */
export type Group = string | null;
/**
 * The label returned by the model.
 */
export type Label = string | null;
/**
 * The name of the detection.
 */
export type Name = string | null;
/**
 * Tell if the detection is positional.
 */
export type Positional = boolean | null;
/**
 * The detectors the analyzer can use.
 */
export type Detectors = Detector[];
/**
 * Tell if the analyzer is enabled by default.
 */
export type Enabled = boolean | null;
/**
 * The group the analyzer belongs to.
 */
export type Group1 = string | null;
/**
 * The name of the model.
 */
export type Name1 = string | null;
/**
 * The revision of the model.
 */
export type Revision = string | null;
/**
 * The models used by the analyzer.
 */
export type Models = AnalyzerModel[];
/**
 * The name of the analyzer.
 */
export type Name2 = string | null;
/**
 * The namespace of the object.
 */
export type Namespace = string | null;
/**
 * A list of trigger or globl pattern that the analyzer will react on. A trigger is the detector Group and Name separated with a /.
 */
export type Triggers = (string | null)[];

/**
 * Represents an analyzer.
 */
export interface Analyzer {
  ID?: ID;
  description?: Description;
  detectors?: Detectors;
  enabled?: Enabled;
  group?: Group1;
  models?: Models;
  name?: Name2;
  namespace?: Namespace;
  triggers?: Triggers;
}
/**
 * Represent a detector an analyzer can use.
 */
export interface Detector {
  description?: Description1;
  group?: Group;
  label?: Label;
  name?: Name;
  positional?: Positional;
  [k: string]: unknown;
}
/**
 * Represent an analyzer model.
 */
export interface AnalyzerModel {
  name?: Name1;
  revision?: Revision;
  [k: string]: unknown;
}


// createValidateIdentity<Analyzer> creates a validator for the the elemental identity Analyzer
export const validateAnalyzer = createValidateIdentity<Analyzer>('analyzer');

export const AnalyzerProperties: Record<keyof Analyzer, PropertyDetails> = {
  "ID": {
    "readOnly": true,
    "description": "ID is the identifier of the object.",
    "title": "ID",
    "type": [
      "string",
      "null"
    ]
  },
  "description": {
    "description": "The description of the analyzer.",
    "title": "Description",
    "type": [
      "string",
      "null"
    ]
  },
  "detectors": {
    "description": "The detectors the analyzer can use.",
    "title": "Detectors",
    "type": "array"
  },
  "enabled": {
    "description": "Tell if the analyzer is enabled by default.",
    "title": "Enabled",
    "type": [
      "boolean",
      "null"
    ]
  },
  "group": {
    "description": "The group the analyzer belongs to.",
    "title": "Group",
    "type": [
      "string",
      "null"
    ]
  },
  "models": {
    "description": "The models used by the analyzer.",
    "title": "Models",
    "type": "array"
  },
  "name": {
    "description": "The name of the analyzer.",
    "title": "Name",
    "type": [
      "string",
      "null"
    ]
  },
  "namespace": {
    "readOnly": true,
    "description": "The namespace of the object.",
    "title": "Namespace",
    "type": [
      "string",
      "null"
    ]
  },
  "triggers": {
    "description": "A list of trigger or globl pattern that the analyzer will react on. A trigger is the detector Group and Name separated with a /.",
    "title": "Triggers",
    "type": "array"
  },
}

// AnalyzerIdentity
export const AnalyzerIdentity = {
  isIdentity: true,
  description: `Represents an analyzer.`,
  title: `Analyzer`,
  friendlyName: `Analyzer`,
  friendlyNamePlural: `Analyzers`,
  name: 'Analyzer',
  restName: 'analyzer',
  resourceName: 'analyzers',
  package: 'lain',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('analyzer'),
  properties: AnalyzerProperties,
} as const;
