// This file has been autogenerated using elemental cli. 
// Use `npm run sync` to update from latest elemental specifications

import { PropertyDetails } from '../utils/const';
import { createFindErrorForIdentity, createValidateIdentity } from '../utils/validate';

/**
 * The group of data.
 */
export type Group = string;
/**
 * The type of data.
 */
export type Type = string;
/**
 * The categories are remapping of the modalities in a more human friendly way.
 */
export type Categories = Modality[];
/**
 * The level of general confidentiality of the input.
 */
export type Confidentiality = number | null;
/**
 * The data extracted.
 */
export type Data = string | null;
/**
 * The end position of the detection.
 */
export type End = number | null;
/**
 * The key that is used in the name's place, If empty, a sequence of X's are used.
 */
export type Key = string | null;
/**
 * The name of the detection.
 */
export type Name = string | null;
/**
 * The confidence score of the detection.
 */
export type Score = number | null;
/**
 * The start position of the detection.
 */
export type Start = number | null;
/**
 * The type of detection.
 */
export type Type1 = "Keyword" | "PII" | "Secret";
/**
 * The detections found while applying policies.
 */
export type Detections = TextualDetection[];
/**
 * The hash of the extraction.
 */
export type Hash = string | null;
/**
 * If true, this extraction is for internal use only. This can be used by agentic systems to mark an extraction as internal only as opposed to user facing.
 */
export type Internal = boolean | null;
/**
 * A means of distinguishing what was extracted, such as prompt, input file or code.
 */
export type Label = string | null;
/**
 * The modalities of data detected in the data.
 */
export type Modalities = Modality[];
/**
 * The redactions that has been performed.
 */
export type Redactions = TextualDetection[];
/**
 * The level of general organization relevance of the input.
 */
export type Relevance = number | null;

/**
 * Represents the extracted information to log.
 */
export interface Extraction {
  PIIs?: PIIs;
  annotations?: Annotations;
  categories?: Categories;
  confidentiality?: Confidentiality;
  data?: Data;
  detections?: Detections;
  exploits?: Exploits;
  hash?: Hash;
  intent?: Intent;
  internal?: Internal;
  keywords?: Keywords;
  label?: Label;
  languages?: Languages;
  modalities?: Modalities;
  redactions?: Redactions;
  relevance?: Relevance;
  secrets?: Secrets;
  topics?: Topics;
}
/**
 * The PIIs found during classification.
 */
export interface PIIs {
  [k: string]: unknown;
}
/**
 * Annotations attached to the extraction.
 */
export interface Annotations {
  [k: string]: unknown;
}
/**
 * Represents the modality of a some data.
 */
export interface Modality {
  group: Group;
  type: Type;
  [k: string]: unknown;
}
/**
 * Represents a textual detection done by policy.
 */
export interface TextualDetection {
  end?: End;
  key?: Key;
  name?: Name;
  score?: Score;
  start?: Start;
  type?: Type1;
  [k: string]: unknown;
}
/**
 * The various exploits attempts.
 */
export interface Exploits {
  [k: string]: unknown;
}
/**
 * The estimated intent embodied into the text.
 */
export interface Intent {
  [k: string]: unknown;
}
/**
 * The keywords found during classification.
 */
export interface Keywords {
  [k: string]: unknown;
}
/**
 * The language of the classification.
 */
export interface Languages {
  [k: string]: unknown;
}
/**
 * The secrets found during classification.
 */
export interface Secrets {
  [k: string]: unknown;
}
/**
 * The topic of the classification.
 */
export interface Topics {
  [k: string]: unknown;
}


// createValidateIdentity<Extraction> creates a validator for the the elemental identity Extraction
export const validateExtraction = createValidateIdentity<Extraction>('extraction');

export const ExtractionProperties: Record<keyof Extraction, PropertyDetails> = {
  "PIIs": {
    "description": "The PIIs found during classification.",
    "title": "PIIs",
    "type": "object"
  },
  "annotations": {
    "description": "Annotations attached to the extraction.",
    "title": "Annotations",
    "type": "object"
  },
  "categories": {
    "description": "The categories are remapping of the modalities in a more human friendly way.",
    "title": "Categories",
    "type": "array"
  },
  "confidentiality": {
    "description": "The level of general confidentiality of the input.",
    "title": "Confidentiality",
    "type": [
      "number",
      "null"
    ]
  },
  "data": {
    "description": "The data extracted.",
    "title": "Data",
    "type": [
      "string",
      "null"
    ]
  },
  "detections": {
    "description": "The detections found while applying policies.",
    "title": "Detections",
    "type": "array"
  },
  "exploits": {
    "description": "The various exploits attempts.",
    "title": "Exploits",
    "type": "object"
  },
  "hash": {
    "description": "The hash of the extraction.",
    "title": "Hash",
    "type": [
      "string",
      "null"
    ]
  },
  "intent": {
    "description": "The estimated intent embodied into the text.",
    "title": "Intent",
    "type": "object"
  },
  "internal": {
    "description": "If true, this extraction is for internal use only. This can be used by agentic systems to mark an extraction as internal only as opposed to user facing.",
    "title": "Internal",
    "type": [
      "boolean",
      "null"
    ]
  },
  "keywords": {
    "description": "The keywords found during classification.",
    "title": "Keywords",
    "type": "object"
  },
  "label": {
    "description": "A means of distinguishing what was extracted, such as prompt, input file or code.",
    "title": "Label",
    "type": [
      "string",
      "null"
    ]
  },
  "languages": {
    "description": "The language of the classification.",
    "title": "Languages",
    "type": "object"
  },
  "modalities": {
    "description": "The modalities of data detected in the data.",
    "title": "Modalities",
    "type": "array"
  },
  "redactions": {
    "description": "The redactions that has been performed.",
    "title": "Redactions",
    "type": "array"
  },
  "relevance": {
    "description": "The level of general organization relevance of the input.",
    "title": "Relevance",
    "type": [
      "number",
      "null"
    ]
  },
  "secrets": {
    "description": "The secrets found during classification.",
    "title": "Secrets",
    "type": "object"
  },
  "topics": {
    "description": "The topic of the classification.",
    "title": "Topics",
    "type": "object"
  },
}

// ExtractionIdentity
export const ExtractionIdentity = {
  isIdentity: true,
  description: `Represents the extracted information to log.`,
  title: `Extraction`,
  friendlyName: `Extraction`,
  friendlyNamePlural: `Extractions`,
  name: 'Extraction',
  restName: 'extraction',
  resourceName: 'extractions',
  package: 'colektor',
  archivable: false,
  findErrorForIdentity: createFindErrorForIdentity('extraction'),
  properties: ExtractionProperties,
} as const;
